{"db":[{"meta":{"exported_on":1549787955969,"version":"1.19.0"},"data":{"migrations":[{"id":1,"name":"1-create-tables.js","version":"init","currentVersion":"1.19"},{"id":2,"name":"2-create-fixtures.js","version":"init","currentVersion":"1.19"},{"id":3,"name":"1-post-excerpt.js","version":"1.3","currentVersion":"1.19"},{"id":4,"name":"1-codeinjection-post.js","version":"1.4","currentVersion":"1.19"},{"id":5,"name":"1-og-twitter-post.js","version":"1.5","currentVersion":"1.19"},{"id":6,"name":"1-add-backup-client.js","version":"1.7","currentVersion":"1.19"},{"id":7,"name":"1-add-permissions-redirect.js","version":"1.9","currentVersion":"1.19"},{"id":8,"name":"1-custom-template-post.js","version":"1.13","currentVersion":"1.19"},{"id":9,"name":"2-theme-permissions.js","version":"1.13","currentVersion":"1.19"},{"id":10,"name":"1-add-webhooks-table.js","version":"1.18","currentVersion":"1.19"},{"id":11,"name":"1-webhook-permissions.js","version":"1.19","currentVersion":"1.19"}],"migrations_lock":[{"lock_key":"km01","locked":0,"acquired_at":"2018-11-06 15:06:45","released_at":"2018-11-06 15:06:45"}],"posts":[{"id":"5a4a757c55630c0001d489bd","uuid":"e71c50d3-5120-4270-87e1-3d6099828081","title":"run app on iOS device","slug":"run-app-on-ios-device","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"[run ios app on device](http://lokvin.wikia.com/wiki/Ios_dev#running_app_on_device)\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><a href=\"http://lokvin.wikia.com/wiki/Ios_dev#running_app_on_device\">run ios app on device</a></p>\n</div>","amp":"2","plaintext":"run ios app on device","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"ios app on device","meta_description":"run ios app on device","author_id":"1","created_at":"2015-07-10 14:37:09","created_by":"1","updated_at":"2015-07-10 14:41:10","updated_by":"1","published_at":"2015-07-10 14:37:45","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a4a757c55630c0001d489be","uuid":"bcf483f0-5e2f-4095-9cd7-ef2cb4495979","title":"first post","slug":"first-post","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Hello, \\n    It's first post of Nuts and Bolts.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Hello,<br>\nIt's first post of Nuts and Bolts.</p>\n</div>","amp":"3","plaintext":"Hello,\nIt's first post of Nuts and Bolts.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-07-10 01:38:46","created_by":"1","updated_at":"2015-07-10 01:39:55","updated_by":"1","published_at":"2015-07-10 01:39:55","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a4a757c55630c0001d489bf","uuid":"358813af-3a33-4abf-a0ef-8a448565d173","title":"Write Code Every Day","slug":"write-code-every-day","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"The blog writing by John Resig, original url:\\nhttp://ejohn.org/blog/write-code-every-day/\\n\\n--------------\\n\\nLast fall, work on my [coding side projects](https://github.com/jeresig) came to a head: I wasn’t making adequate progress and I couldn’t find a way to get more done without sacrificing my ability to do effective work at [Khan Academy](https://www.khanacademy.org/).\\n\\nThere were a few major problems with how I was working on my side projects. I was primarily working on them during the weekends and sometimes in the evenings during the week. This is a strategy that does not work well for me, as it turns out. I was burdened with an incredible amount of stress to try and complete as much high quality work as possible during the weekend (and if I was unable to it felt like a failure). This was a problem as there’s no guarantee that every weekend will be free – nor that I’ll want to program all day for two days (removing any chance of relaxation or doing anything fun).\\n\\nThere’s also the issue that a week between working on some code is a long time, it’s very easy to forget what you were working on or what you left off on (even if you keep notes). Not to mention if you miss a weekend you end up with a two week gap as a result. That massive multi-week context switch can be deadly (I’ve had many side projects die due to attention starvation like that).\\n\\nInspired by the incredible work that [Jennifer Dewalt](http://jenniferdewalt.com/) completed last year, in which she taught herself programming by building 180 web sites in 180 days, I felt compelled to try a similar tactic: working on my side projects every single day.\\n\\n![write code](http://i2.wp.com/i.imgur.com/SsevWYY.jpg)\\n\\nI decided to set a couple rules for myself:\\n\\n1. I must write code every day. I can write docs, or blog posts, or other things but it must be in addition to the code that I write.\\n2. It must be useful code. No tweaking indentation, no code re-formatting, and if at all possible no refactoring. (All these things are permitted, but not as the exclusive work of the day.)\\n3. All code must be written before midnight.\\n4. The code must be Open Source and up on Github.\\n\\nSome of these rules were arbitrary. The code doesn’t technically need to be written before midnight of the day of but I wanted to avoid staying up too late writing sloppy code. Neither does the code have to be Open Source or up on Github. This just forced me to be more mindful of the code that I was writing (thinking about reusability and deciding to create modules earlier in the process).\\n\\nThus far I’ve been very successful, I’m nearing 20 weeks of consecutive work. I wanted to write about it as it’s completely changed how I code and has had a substantial impact upon my life and psyche.\\n\\n![resig blog](http://i1.wp.com/i.imgur.com/5zjbxsz.jpg)\\n\\nWith this in mind a number of interesting things happened as a result of this change in habit:\\n\\n**Minimum viable code.** I was forced to write code for no less than 30 minutes a day. (It’s really hard to write meaningful code in less time, especially after remembering where you left off the day before.) Some week days I work a little bit more (usually no more than an hour) and on weekends I’m sometimes able to work a full day.\\n\\n**Code as habit.** It’s important to note that that I don’t particularly care about the outward perception of the above Github chart. I think that’s the most important take away from this experiment: this is about a change that you’re making in your life for yourself not a change that you’re making to satisfy someone else’s perception of your work. The same goes for any form of dieting or exercise: if you don’t care about improving yourself then you’ll never actually succeed.\\n\\n**Battling anxiety.** Prior to starting this experiment I would frequently feel a high level of anxiety over not having completed “enough” work or made “enough” progress (both of which are relatively unquantifiable as my side projects had no specific deadlines). I realized that the **feeling of making progress is just as important as making actual progress.** This was an eye-opener. Once I started to make consistent progress every day the anxiety started to melt away. I felt at peace with the amount of work that I was getting done and I no longer had the over-bearing desire to frantically get any work done.\\n\\n**Weekends.** Getting work done on weekends use to be absolutely critical towards making forward momentum (as they were, typically, the only time in which I got significant side project coding done). That’s not so much the case now – and that’s a good thing. Building up a weeks-worth of expectations about what I should accomplish during the weekend only ended up leaving me disappointed. I was rarely able to complete all the work that I wanted and it forced me to reject other weekend activities that I enjoyed (eating dim sum, visiting museums, going to the park, spending time with my partner, etc.) in favor of getting more work done. I strongly feel that while side projects are really important they should not be to the exclusion of life in general.\\n\\n**Background processing.** An interesting side effect of writing side project code every day is that your current task is frequently running in the back of your mind. Thus when I go for a walk, or take a shower, or any of the other non-brain-using activities I participate in, I’m thinking about what I’m going to be coding later and finding a good way to solve that problem. This did not happen when I was working on the code once a week, or every other week. Instead that time was consumed thinking about some other task or, usually, replaced with anxiety over not getting any side project work done.\\n\\n**Context switch.** There’s always going to be a context switch cost when resuming work on a side project. Unfortunately it’s extremely hard to resume thinking about a project after an entire week of working on another task. Daily work has been quite helpful in this regard as the time period between work is much shorter, making it easier to remember what I was working on.\\n\\n**Work balance.** One of the most important aspects of this change was in simply learning how to better balance work/life/side project. Knowing that I was going to have to work on the project every single day I had to get better at balancing my time. If I was scheduled to go out in the evening, and not get back until late, then I would need to work on my side project early in the day, before starting my main Khan Academy work. Additionally if I hadn’t finished my work yet, and I was out late, then I’d hurry back home to finish it up (instead of missing a day). I should note that I’ve been finding that I have less time to spend on hobbies (such as woodblock printing) but that’s a reasonable tradeoff that I’ll need to live with.\\n\\n**Outward perception.** This has all had the added benefit of communicating this new habit externally. My partner understands that I have to finish this work every day, and thus activities sometimes have to be scheduled around it. It’s of considerable comfort to be able to say “Yes, we can go out/watch a movie/etc. but I have to get my coding in later” and have that be understood and taken into consideration.\\n\\n**How much code was written?** I have a hard time believing how much code I’ve written over the past few months. I created a couple new web sites, re-wrote some frameworks, and created a ton of new node modules. I’ve written so much I sometimes forget the things I’ve made – work from even a few weeks prior seem like a distant memory. I’m extremely pleased with the amount of work that I’ve gotten done.\\n\\nI consider this change in habit to be a massive success and hope to continue it for as long as I can. In the meantime I’ll do all that I can to recommend this tactic to others who wish to get substantial side project work done. [Let me know](http://ejohn.org/about/) if this technique does, or doesn’t, work for you – I’m very interested in hearing additional anecdotes!\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>The blog writing by John Resig, original url:<br>\n<a href=\"http://ejohn.org/blog/write-code-every-day/\">http://ejohn.org/blog/write-code-every-day/</a></p>\n<hr>\n<p>Last fall, work on my <a href=\"https://github.com/jeresig\">coding side projects</a> came to a head: I wasn’t making adequate progress and I couldn’t find a way to get more done without sacrificing my ability to do effective work at <a href=\"https://www.khanacademy.org/\">Khan Academy</a>.</p>\n<p>There were a few major problems with how I was working on my side projects. I was primarily working on them during the weekends and sometimes in the evenings during the week. This is a strategy that does not work well for me, as it turns out. I was burdened with an incredible amount of stress to try and complete as much high quality work as possible during the weekend (and if I was unable to it felt like a failure). This was a problem as there’s no guarantee that every weekend will be free – nor that I’ll want to program all day for two days (removing any chance of relaxation or doing anything fun).</p>\n<p>There’s also the issue that a week between working on some code is a long time, it’s very easy to forget what you were working on or what you left off on (even if you keep notes). Not to mention if you miss a weekend you end up with a two week gap as a result. That massive multi-week context switch can be deadly (I’ve had many side projects die due to attention starvation like that).</p>\n<p>Inspired by the incredible work that <a href=\"http://jenniferdewalt.com/\">Jennifer Dewalt</a> completed last year, in which she taught herself programming by building 180 web sites in 180 days, I felt compelled to try a similar tactic: working on my side projects every single day.</p>\n<p><img src=\"http://i2.wp.com/i.imgur.com/SsevWYY.jpg\" alt=\"write code\"></p>\n<p>I decided to set a couple rules for myself:</p>\n<ol>\n<li>I must write code every day. I can write docs, or blog posts, or other things but it must be in addition to the code that I write.</li>\n<li>It must be useful code. No tweaking indentation, no code re-formatting, and if at all possible no refactoring. (All these things are permitted, but not as the exclusive work of the day.)</li>\n<li>All code must be written before midnight.</li>\n<li>The code must be Open Source and up on Github.</li>\n</ol>\n<p>Some of these rules were arbitrary. The code doesn’t technically need to be written before midnight of the day of but I wanted to avoid staying up too late writing sloppy code. Neither does the code have to be Open Source or up on Github. This just forced me to be more mindful of the code that I was writing (thinking about reusability and deciding to create modules earlier in the process).</p>\n<p>Thus far I’ve been very successful, I’m nearing 20 weeks of consecutive work. I wanted to write about it as it’s completely changed how I code and has had a substantial impact upon my life and psyche.</p>\n<p><img src=\"http://i1.wp.com/i.imgur.com/5zjbxsz.jpg\" alt=\"resig blog\"></p>\n<p>With this in mind a number of interesting things happened as a result of this change in habit:</p>\n<p><strong>Minimum viable code.</strong> I was forced to write code for no less than 30 minutes a day. (It’s really hard to write meaningful code in less time, especially after remembering where you left off the day before.) Some week days I work a little bit more (usually no more than an hour) and on weekends I’m sometimes able to work a full day.</p>\n<p><strong>Code as habit.</strong> It’s important to note that that I don’t particularly care about the outward perception of the above Github chart. I think that’s the most important take away from this experiment: this is about a change that you’re making in your life for yourself not a change that you’re making to satisfy someone else’s perception of your work. The same goes for any form of dieting or exercise: if you don’t care about improving yourself then you’ll never actually succeed.</p>\n<p><strong>Battling anxiety.</strong> Prior to starting this experiment I would frequently feel a high level of anxiety over not having completed “enough” work or made “enough” progress (both of which are relatively unquantifiable as my side projects had no specific deadlines). I realized that the <strong>feeling of making progress is just as important as making actual progress.</strong> This was an eye-opener. Once I started to make consistent progress every day the anxiety started to melt away. I felt at peace with the amount of work that I was getting done and I no longer had the over-bearing desire to frantically get any work done.</p>\n<p><strong>Weekends.</strong> Getting work done on weekends use to be absolutely critical towards making forward momentum (as they were, typically, the only time in which I got significant side project coding done). That’s not so much the case now – and that’s a good thing. Building up a weeks-worth of expectations about what I should accomplish during the weekend only ended up leaving me disappointed. I was rarely able to complete all the work that I wanted and it forced me to reject other weekend activities that I enjoyed (eating dim sum, visiting museums, going to the park, spending time with my partner, etc.) in favor of getting more work done. I strongly feel that while side projects are really important they should not be to the exclusion of life in general.</p>\n<p><strong>Background processing.</strong> An interesting side effect of writing side project code every day is that your current task is frequently running in the back of your mind. Thus when I go for a walk, or take a shower, or any of the other non-brain-using activities I participate in, I’m thinking about what I’m going to be coding later and finding a good way to solve that problem. This did not happen when I was working on the code once a week, or every other week. Instead that time was consumed thinking about some other task or, usually, replaced with anxiety over not getting any side project work done.</p>\n<p><strong>Context switch.</strong> There’s always going to be a context switch cost when resuming work on a side project. Unfortunately it’s extremely hard to resume thinking about a project after an entire week of working on another task. Daily work has been quite helpful in this regard as the time period between work is much shorter, making it easier to remember what I was working on.</p>\n<p><strong>Work balance.</strong> One of the most important aspects of this change was in simply learning how to better balance work/life/side project. Knowing that I was going to have to work on the project every single day I had to get better at balancing my time. If I was scheduled to go out in the evening, and not get back until late, then I would need to work on my side project early in the day, before starting my main Khan Academy work. Additionally if I hadn’t finished my work yet, and I was out late, then I’d hurry back home to finish it up (instead of missing a day). I should note that I’ve been finding that I have less time to spend on hobbies (such as woodblock printing) but that’s a reasonable tradeoff that I’ll need to live with.</p>\n<p><strong>Outward perception.</strong> This has all had the added benefit of communicating this new habit externally. My partner understands that I have to finish this work every day, and thus activities sometimes have to be scheduled around it. It’s of considerable comfort to be able to say “Yes, we can go out/watch a movie/etc. but I have to get my coding in later” and have that be understood and taken into consideration.</p>\n<p><strong>How much code was written?</strong> I have a hard time believing how much code I’ve written over the past few months. I created a couple new web sites, re-wrote some frameworks, and created a ton of new node modules. I’ve written so much I sometimes forget the things I’ve made – work from even a few weeks prior seem like a distant memory. I’m extremely pleased with the amount of work that I’ve gotten done.</p>\n<p>I consider this change in habit to be a massive success and hope to continue it for as long as I can. In the meantime I’ll do all that I can to recommend this tactic to others who wish to get substantial side project work done. <a href=\"http://ejohn.org/about/\">Let me know</a> if this technique does, or doesn’t, work for you – I’m very interested in hearing additional anecdotes!</p>\n</div>","amp":"4","plaintext":"The blog writing by John Resig, original url:\nhttp://ejohn.org/blog/write-code-every-day/\n\n\n--------------------------------------------------------------------------------\n\nLast fall, work on my coding side projects [https://github.com/jeresig]  came to\na head: I wasn’t making adequate progress and I couldn’t find a way to get more\ndone without sacrificing my ability to do effective work at Khan Academy\n[https://www.khanacademy.org/].\n\nThere were a few major problems with how I was working on my side projects. I\nwas primarily working on them during the weekends and sometimes in the evenings\nduring the week. This is a strategy that does not work well for me, as it turns\nout. I was burdened with an incredible amount of stress to try and complete as\nmuch high quality work as possible during the weekend (and if I was unable to it\nfelt like a failure). This was a problem as there’s no guarantee that every\nweekend will be free – nor that I’ll want to program all day for two days\n(removing any chance of relaxation or doing anything fun).\n\nThere’s also the issue that a week between working on some code is a long time,\nit’s very easy to forget what you were working on or what you left off on (even\nif you keep notes). Not to mention if you miss a weekend you end up with a two\nweek gap as a result. That massive multi-week context switch can be deadly (I’ve\nhad many side projects die due to attention starvation like that).\n\nInspired by the incredible work that Jennifer Dewalt\n[http://jenniferdewalt.com/]  completed last year, in which she taught herself\nprogramming by building 180 web sites in 180 days, I felt compelled to try a\nsimilar tactic: working on my side projects every single day.\n\n\n\nI decided to set a couple rules for myself:\n\n 1. I must write code every day. I can write docs, or blog posts, or other\n    things but it must be in addition to the code that I write.\n 2. It must be useful code. No tweaking indentation, no code re-formatting, and\n    if at all possible no refactoring. (All these things are permitted, but not\n    as the exclusive work of the day.)\n 3. All code must be written before midnight.\n 4. The code must be Open Source and up on Github.\n\nSome of these rules were arbitrary. The code doesn’t technically need to be\nwritten before midnight of the day of but I wanted to avoid staying up too late\nwriting sloppy code. Neither does the code have to be Open Source or up on\nGithub. This just forced me to be more mindful of the code that I was writing\n(thinking about reusability and deciding to create modules earlier in the\nprocess).\n\nThus far I’ve been very successful, I’m nearing 20 weeks of consecutive work. I\nwanted to write about it as it’s completely changed how I code and has had a\nsubstantial impact upon my life and psyche.\n\n\n\nWith this in mind a number of interesting things happened as a result of this\nchange in habit:\n\nMinimum viable code.  I was forced to write code for no less than 30 minutes a\nday. (It’s really hard to write meaningful code in less time, especially after\nremembering where you left off the day before.) Some week days I work a little\nbit more (usually no more than an hour) and on weekends I’m sometimes able to\nwork a full day.\n\nCode as habit.  It’s important to note that that I don’t particularly care about\nthe outward perception of the above Github chart. I think that’s the most\nimportant take away from this experiment: this is about a change that you’re\nmaking in your life for yourself not a change that you’re making to satisfy\nsomeone else’s perception of your work. The same goes for any form of dieting or\nexercise: if you don’t care about improving yourself then you’ll never actually\nsucceed.\n\nBattling anxiety.  Prior to starting this experiment I would frequently feel a\nhigh level of anxiety over not having completed “enough” work or made “enough”\nprogress (both of which are relatively unquantifiable as my side projects had no\nspecific deadlines). I realized that the feeling of making progress is just as\nimportant as making actual progress.  This was an eye-opener. Once I started to\nmake consistent progress every day the anxiety started to melt away. I felt at\npeace with the amount of work that I was getting done and I no longer had the\nover-bearing desire to frantically get any work done.\n\nWeekends.  Getting work done on weekends use to be absolutely critical towards\nmaking forward momentum (as they were, typically, the only time in which I got\nsignificant side project coding done). That’s not so much the case now – and\nthat’s a good thing. Building up a weeks-worth of expectations about what I\nshould accomplish during the weekend only ended up leaving me disappointed. I\nwas rarely able to complete all the work that I wanted and it forced me to\nreject other weekend activities that I enjoyed (eating dim sum, visiting\nmuseums, going to the park, spending time with my partner, etc.) in favor of\ngetting more work done. I strongly feel that while side projects are really\nimportant they should not be to the exclusion of life in general.\n\nBackground processing.  An interesting side effect of writing side project code\nevery day is that your current task is frequently running in the back of your\nmind. Thus when I go for a walk, or take a shower, or any of the other\nnon-brain-using activities I participate in, I’m thinking about what I’m going\nto be coding later and finding a good way to solve that problem. This did not\nhappen when I was working on the code once a week, or every other week. Instead\nthat time was consumed thinking about some other task or, usually, replaced with\nanxiety over not getting any side project work done.\n\nContext switch.  There’s always going to be a context switch cost when resuming\nwork on a side project. Unfortunately it’s extremely hard to resume thinking\nabout a project after an entire week of working on another task. Daily work has\nbeen quite helpful in this regard as the time period between work is much\nshorter, making it easier to remember what I was working on.\n\nWork balance.  One of the most important aspects of this change was in simply\nlearning how to better balance work/life/side project. Knowing that I was going\nto have to work on the project every single day I had to get better at balancing\nmy time. If I was scheduled to go out in the evening, and not get back until\nlate, then I would need to work on my side project early in the day, before\nstarting my main Khan Academy work. Additionally if I hadn’t finished my work\nyet, and I was out late, then I’d hurry back home to finish it up (instead of\nmissing a day). I should note that I’ve been finding that I have less time to\nspend on hobbies (such as woodblock printing) but that’s a reasonable tradeoff\nthat I’ll need to live with.\n\nOutward perception.  This has all had the added benefit of communicating this\nnew habit externally. My partner understands that I have to finish this work\nevery day, and thus activities sometimes have to be scheduled around it. It’s of\nconsiderable comfort to be able to say “Yes, we can go out/watch a movie/etc.\nbut I have to get my coding in later” and have that be understood and taken into\nconsideration.\n\nHow much code was written?  I have a hard time believing how much code I’ve\nwritten over the past few months. I created a couple new web sites, re-wrote\nsome frameworks, and created a ton of new node modules. I’ve written so much I\nsometimes forget the things I’ve made – work from even a few weeks prior seem\nlike a distant memory. I’m extremely pleased with the amount of work that I’ve\ngotten done.\n\nI consider this change in habit to be a massive success and hope to continue it\nfor as long as I can. In the meantime I’ll do all that I can to recommend this\ntactic to others who wish to get substantial side project work done. Let me know\n[http://ejohn.org/about/]  if this technique does, or doesn’t, work for you –\nI’m very interested in hearing additional anecdotes!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-10-14 14:19:17","created_by":"1","updated_at":"2015-10-16 07:17:48","updated_by":"1","published_at":"2015-10-14 14:33:49","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a4a757c55630c0001d489c0","uuid":"b9ec7974-9248-48f1-ab69-6121d39534d0","title":"How JavaScript Timers Work","slug":"how-javascript-timers-work","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"write by John Resig [how javascript timer work](http://ejohn.org/blog/how-javascript-timers-work/)\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>write by John Resig <a href=\"http://ejohn.org/blog/how-javascript-timers-work/\">how javascript timer work</a></p>\n</div>","amp":"5","plaintext":"write by John Resig how javascript timer work\n[http://ejohn.org/blog/how-javascript-timers-work/]","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-11-27 06:58:58","created_by":"1","updated_at":"2015-12-03 14:34:59","updated_by":"1","published_at":"2015-11-27 06:59:36","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a4a757c55630c0001d489c1","uuid":"738c1a0b-2a5c-4271-b4bc-3a2791bf9712","title":"Apache rewrite (mod_rewrite)","slug":"apache-rewrite-mod_rewrite","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"#### Discard query string in rewrite rule\\n\\neg. we want rewrite \\n`http://www.foo.com?query=abc` to `http://www.foo.com/noquery`\\nApache always appends the original query string (`?query=abc`) to the target URL which we don’t want.\\n\\n* In Apache 2.4 or later you can use the **QSD** option (qsdiscard) to remove the query string like:\\n\\n```\\nRewriteCond %{QUERY_STRING} ^query=abc$\\nRewriteRule ^/$ /noqueries [QSD,R=301,L]\\n```\\n\\n* Apache 2.2 and early don't support **QSD** option, need a trick, add **?** at the end of target url (empty query string), like:\\n\\n```\\nRewriteCond %{QUERY_STRING} ^query=abc$\\nRewriteRule ^/$ /noqueries? [R=301,L]\\n```\\n\\nreference doc: https://www.philipphoffmann.de/blog/2012/08/16/how-to-discard-the-query-string-in-a-rewriterule-apache-mod_rewrite/\\n\\n#### Don't encode query string when rewrite\\n* mode_rewrite default re-urlencode the query string param, this cause the param encode **twice**, add **NE** (no escape) option to avoid this.\\n\\n```\\nRewriteRule ^/lookup$  /search/companies   [R=301,NC,NE,L]\\n```\\n\\nreference doc: http://stackoverflow.com/questions/6520484/mod-rewrite-urlencoding-an-already-urlencoded-querystring-parameter-any-way-to\\n\\n#### Query string condition rewrite\\n* use query parameter decide which url to rwrite. eg:\\n```\\nRewriteCond %{QUERY_STRING} ^ntype=1&ncid=2$ [NC]\\nRewriteRule ^/categoryTop\\\\.php$ /news/business? [NC,L,R=301]\\n\\nRewriteCond %{QUERY_STRING} ^ntype=1&ncid=3$ [NC]\\nRewriteRule ^/categoryTop\\\\.php$ /news/world? [NC,L,R=301]\\n```\\n\\n#### Rewrite Option\\n* **NC**  - no case (ignore canse)\\n* **L**   - last rewrite rule\\n* **R**   - force redirect, default **R=302**, you can specify other value, like: 301\\n* **F**   - force url to be forbidden. return **403 HTTP**\\n* **G**   - force url to be gone. return **410 HTTP**\\n* **P**   - force proxy\\n* **N**   - next round\\n* **C**   - chained with next rule\\n* **T**   - **T=MINIE-type**, fore mime type\\n* **NS**  - used only if no internal sub-request\\n* **QSA** - query string append\\n* **QSD** - query string discard, available on apache 2.4 or later.\\n* **NE**  - no escape, use this avoid encode query string twice.\\n* **PT**  - pass through to next hander\\n* **S**   - skip next rules **S=num**\\n* **E**   - set env variable **E=var:val**\\n\\n#### Some rewrite example\\n* rewrite from \\n\\n#### Offical doc\\n* [apache2.2 mod_rewrite](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)\\n* [apache2.4 mod_rewrite](http://httpd.apache.org/docs/2.4/rewrite/) \"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h4 id=\"discardquerystringinrewriterule\">Discard query string in rewrite rule</h4>\n<p>eg. we want rewrite<br>\n<code>http://www.foo.com?query=abc</code> to <code>http://www.foo.com/noquery</code><br>\nApache always appends the original query string (<code>?query=abc</code>) to the target URL which we don’t want.</p>\n<ul>\n<li>In Apache 2.4 or later you can use the <strong>QSD</strong> option (qsdiscard) to remove the query string like:</li>\n</ul>\n<pre><code>RewriteCond %{QUERY_STRING} ^query=abc$\nRewriteRule ^/$ /noqueries [QSD,R=301,L]\n</code></pre>\n<ul>\n<li>Apache 2.2 and early don't support <strong>QSD</strong> option, need a trick, add <strong>?</strong> at the end of target url (empty query string), like:</li>\n</ul>\n<pre><code>RewriteCond %{QUERY_STRING} ^query=abc$\nRewriteRule ^/$ /noqueries? [R=301,L]\n</code></pre>\n<p>reference doc: <a href=\"https://www.philipphoffmann.de/blog/2012/08/16/how-to-discard-the-query-string-in-a-rewriterule-apache-mod_rewrite/\">https://www.philipphoffmann.de/blog/2012/08/16/how-to-discard-the-query-string-in-a-rewriterule-apache-mod_rewrite/</a></p>\n<h4 id=\"dontencodequerystringwhenrewrite\">Don't encode query string when rewrite</h4>\n<ul>\n<li>mode_rewrite default re-urlencode the query string param, this cause the param encode <strong>twice</strong>, add <strong>NE</strong> (no escape) option to avoid this.</li>\n</ul>\n<pre><code>RewriteRule ^/lookup$  /search/companies   [R=301,NC,NE,L]\n</code></pre>\n<p>reference doc: <a href=\"http://stackoverflow.com/questions/6520484/mod-rewrite-urlencoding-an-already-urlencoded-querystring-parameter-any-way-to\">http://stackoverflow.com/questions/6520484/mod-rewrite-urlencoding-an-already-urlencoded-querystring-parameter-any-way-to</a></p>\n<h4 id=\"querystringconditionrewrite\">Query string condition rewrite</h4>\n<ul>\n<li>use query parameter decide which url to rwrite. eg:</li>\n</ul>\n<pre><code>RewriteCond %{QUERY_STRING} ^ntype=1&amp;ncid=2$ [NC]\nRewriteRule ^/categoryTop\\.php$ /news/business? [NC,L,R=301]\n\nRewriteCond %{QUERY_STRING} ^ntype=1&amp;ncid=3$ [NC]\nRewriteRule ^/categoryTop\\.php$ /news/world? [NC,L,R=301]\n</code></pre>\n<h4 id=\"rewriteoption\">Rewrite Option</h4>\n<ul>\n<li><strong>NC</strong>  - no case (ignore canse)</li>\n<li><strong>L</strong>   - last rewrite rule</li>\n<li><strong>R</strong>   - force redirect, default <strong>R=302</strong>, you can specify other value, like: 301</li>\n<li><strong>F</strong>   - force url to be forbidden. return <strong>403 HTTP</strong></li>\n<li><strong>G</strong>   - force url to be gone. return <strong>410 HTTP</strong></li>\n<li><strong>P</strong>   - force proxy</li>\n<li><strong>N</strong>   - next round</li>\n<li><strong>C</strong>   - chained with next rule</li>\n<li><strong>T</strong>   - <strong>T=MINIE-type</strong>, fore mime type</li>\n<li><strong>NS</strong>  - used only if no internal sub-request</li>\n<li><strong>QSA</strong> - query string append</li>\n<li><strong>QSD</strong> - query string discard, available on apache 2.4 or later.</li>\n<li><strong>NE</strong>  - no escape, use this avoid encode query string twice.</li>\n<li><strong>PT</strong>  - pass through to next hander</li>\n<li><strong>S</strong>   - skip next rules <strong>S=num</strong></li>\n<li><strong>E</strong>   - set env variable <strong>E=var:val</strong></li>\n</ul>\n<h4 id=\"somerewriteexample\">Some rewrite example</h4>\n<ul>\n<li>rewrite from</li>\n</ul>\n<h4 id=\"officaldoc\">Offical doc</h4>\n<ul>\n<li><a href=\"http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html\">apache2.2 mod_rewrite</a></li>\n<li><a href=\"http://httpd.apache.org/docs/2.4/rewrite/\">apache2.4 mod_rewrite</a></li>\n</ul>\n</div>","amp":"6","plaintext":"Discard query string in rewrite rule\neg. we want rewrite\nhttp://www.foo.com?query=abc  to http://www.foo.com/noquery\nApache always appends the original query string (?query=abc) to the target URL\nwhich we don’t want.\n\n * In Apache 2.4 or later you can use the QSD  option (qsdiscard) to remove the\n   query string like:\n\nRewriteCond %{QUERY_STRING} ^query=abc$\nRewriteRule ^/$ /noqueries [QSD,R=301,L]\n\n\n * Apache 2.2 and early don't support QSD  option, need a trick, add ?  at the\n   end of target url (empty query string), like:\n\nRewriteCond %{QUERY_STRING} ^query=abc$\nRewriteRule ^/$ /noqueries? [R=301,L]\n\n\nreference doc: \nhttps://www.philipphoffmann.de/blog/2012/08/16/how-to-discard-the-query-string-in-a-rewriterule-apache-mod_rewrite/\n\nDon't encode query string when rewrite\n * mode_rewrite default re-urlencode the query string param, this cause the\n   param encode twice, add NE  (no escape) option to avoid this.\n\nRewriteRule ^/lookup$  /search/companies   [R=301,NC,NE,L]\n\n\nreference doc: \nhttp://stackoverflow.com/questions/6520484/mod-rewrite-urlencoding-an-already-urlencoded-querystring-parameter-any-way-to\n\nQuery string condition rewrite\n * use query parameter decide which url to rwrite. eg:\n\nRewriteCond %{QUERY_STRING} ^ntype=1&ncid=2$ [NC]\nRewriteRule ^/categoryTop\\.php$ /news/business? [NC,L,R=301]\n\nRewriteCond %{QUERY_STRING} ^ntype=1&ncid=3$ [NC]\nRewriteRule ^/categoryTop\\.php$ /news/world? [NC,L,R=301]\n\n\nRewrite Option\n * NC  - no case (ignore canse)\n * L  - last rewrite rule\n * R  - force redirect, default R=302, you can specify other value, like: 301\n * F  - force url to be forbidden. return 403 HTTP\n * G  - force url to be gone. return 410 HTTP\n * P  - force proxy\n * N  - next round\n * C  - chained with next rule\n * T  - T=MINIE-type, fore mime type\n * NS  - used only if no internal sub-request\n * QSA  - query string append\n * QSD  - query string discard, available on apache 2.4 or later.\n * NE  - no escape, use this avoid encode query string twice.\n * PT  - pass through to next hander\n * S  - skip next rules S=num\n * E  - set env variable E=var:val\n\nSome rewrite example\n * rewrite from\n\nOffical doc\n * apache2.2 mod_rewrite [http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html]\n * apache2.4 mod_rewrite [http://httpd.apache.org/docs/2.4/rewrite/]","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-12-03 14:14:40","created_by":"1","updated_at":"2015-12-04 05:08:18","updated_by":"1","published_at":"2015-12-03 14:31:27","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a4af3bb6e01830001a9c2ab","uuid":"b9e6c010-d6d7-4601-800d-9ed344fb1594","title":"Merry Christmas and Happy New Year","slug":"merry-christmas-and-happy-new-year","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"![Merry Christmas](https://i.imgur.com/qbnjuFb.jpg)\\n\\n新的一年到了，希望在新的一年中家人身体健康，一切都顺利。\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><img src=\"https://i.imgur.com/qbnjuFb.jpg\" alt=\"Merry Christmas\"></p>\n<p>新的一年到了，希望在新的一年中家人身体健康，一切都顺利。</p>\n</div>","amp":null,"plaintext":"新的一年到了，希望在新的一年中家人身体健康，一切都顺利。","feature_image":"","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-01-02 02:51:39","created_by":"1","updated_at":"2018-01-02 03:10:17","updated_by":"1","published_at":"2018-01-02 02:57:46","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a5c422a6e01830001a9c2af","uuid":"6c74f4eb-f89e-4a56-9da0-63b2fdb2b7c3","title":"Introduction to Kubernetes Architecture","slug":"introduction-to-kubernetes-architecture","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"https://x-team.com/blog/introduction-kubernetes-architecture/\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><a href=\"https://x-team.com/blog/introduction-kubernetes-architecture/\">https://x-team.com/blog/introduction-kubernetes-architecture/</a></p>\n</div>","amp":null,"plaintext":"https://x-team.com/blog/introduction-kubernetes-architecture/","feature_image":"https://images.unsplash.com/photo-1515933870716-2602e8389ca6?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=49f45229da0b08f24a79efa79cd1516c&ixid=eyJhcHBfaWQiOjExNzczfQ==","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-01-15 05:54:50","created_by":"1","updated_at":"2018-01-15 07:31:24","updated_by":"1","published_at":"2018-01-15 05:56:59","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a5c58436e01830001a9c2b0","uuid":"403c6ca6-dae1-4186-b96c-c2e2ac362bbb","title":"blue green deployment","slug":"blue-green-deployment","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"https://martinfowler.com/bliki/BlueGreenDeployment.html\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><a href=\"https://martinfowler.com/bliki/BlueGreenDeployment.html\">https://martinfowler.com/bliki/BlueGreenDeployment.html</a></p>\n</div>","amp":null,"plaintext":"https://martinfowler.com/bliki/BlueGreenDeployment.html","feature_image":"https://images.unsplash.com/photo-1515771688621-6a2827a7d76a?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=9043ac37a4e4911890a13a849a8a762f&ixid=eyJhcHBfaWQiOjExNzczfQ==","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-01-15 07:29:07","created_by":"1","updated_at":"2018-01-15 07:30:53","updated_by":"1","published_at":"2018-01-15 07:30:06","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a5c58ea6e01830001a9c2b3","uuid":"d67247dc-5eb0-4cd3-a1b2-13aa0b91caab","title":"Blue-green Deployments, A/B Testing, and Canary Releases","slug":"blue-green-deployments-a-b-testing-and-canary-releases","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"http://blog.christianposta.com/deploy/blue-green-deployments-a-b-testing-and-canary-releases/\\n\\n[translate CN](https://github.com/yren/docs-cn/blob/master/01.blue-green-deployments-a-b-testing.md)\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><a href=\"http://blog.christianposta.com/deploy/blue-green-deployments-a-b-testing-and-canary-releases/\">http://blog.christianposta.com/deploy/blue-green-deployments-a-b-testing-and-canary-releases/</a></p>\n<p><a href=\"https://github.com/yren/docs-cn/blob/master/01.blue-green-deployments-a-b-testing.md\">translate CN</a></p>\n</div>","amp":null,"plaintext":"http://blog.christianposta.com/deploy/blue-green-deployments-a-b-testing-and-canary-releases/","feature_image":"https://images.unsplash.com/photo-1515708635402-0ae40c17156a?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=309caff37c83859ab2805d0b74b1fb73&ixid=eyJhcHBfaWQiOjExNzczfQ==","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-01-15 07:31:54","created_by":"1","updated_at":"2018-01-15 08:25:06","updated_by":"1","published_at":"2018-01-15 07:32:28","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5b63e1986e01830001a9c2b8","uuid":"a1a30506-2f18-4c28-b126-c4f50198a43d","title":"Erlang 入坑指南[转]","slug":"erlang-ru-keng-zhi-nan-zhuan","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"原文：https://mp.weixin.qq.com/s/x-W6aqyddNdp4PIrb8qB9A\\n\\n>程序君按：小山是一个很勤勉，求知欲很强的工程师，硬磕了不少 erlang 的底层实现 —— 前一段时间他搞懂了整个 erlang release 的过程，喜滋滋给我这种还活在 distillery 荫庇下的小确幸讲解。这篇文章是他在《程序人生》的处女稿，从另一个角度跟大家介绍一下 erlang。虽然我之前也也写过一篇介绍 上帝说：要有一门面向未来的语言，于是有了 erlang。但那篇过于笼统，没有专精一点，而他这篇，从六个基础函数讲起，深入浅出，拨开紫烟，把一座神秘美妙的香炉峰呈现在你的面前。\\n\\n>以下正文。\\n\\n想了半天憋出这么个题目来，这也的确只是一篇入坑文。之前程序君写过一篇 Erlang 文章，我用谷歌翻译出来给 Joe Armstrong 老爷子看，老爷子看后大加赞赏，说这家伙搞懂 Erlang 了,我要和他约一组，于是就有了程序君与Joe老爷子对话这篇文章。这篇入坑指南很短，尝试从另一个角度认识 Erlang 。\\n\\n# Erlang 难吗?\\n难，也不难。\\n\\n大部分人学习编程是从面向对象过来的。 Erlang 是一门函数式编程语言。写码时候的思维方式和传统的面向对象还是有很大差别的。这算是第一个挑战。\\n\\n第二个挑战是， Erlang 的语法比较奇怪。当然这点因人而异，不过对于看惯了 Java / C++ / Ruby 的我们来说，第一次看见 Erlang 的程序是有些少许不适应。 Erlang 是 Joe 老爷子和他的两个同事 1986 年做的项目，受到一个叫做 Prolog 的语言的影响很深。Prolog 大部分人可能都没听过，更别说用过了，我特地搜了下 Prolog，跟 Erlang 绝对是一个亲妈生的。我问 Joe 为啥是 Prolog，老爷子说因为他 C 写特烂所以就用 Prolog 实现的初版 Erlang 。。。对于我来说， Erlang 的语法看着真是有点晕菜，所以一直特意没去碰它。不过之后用了一段时间 Erlang 之后，语法渐渐变得亲切可爱起来了，毕竟他只是一个语法，熟悉了就没那么可怕了。\\n\\n接下来的挑战是并发。并发概念不难，但要把它搞对很难，尤其在 C 中。而并发在 Erlang 中巨简单，只要你理解了 Erlang 的核心（下面会讲）。我们的大脑会将我们不了解的东西无限放大，会觉得怎么都搞不定。但是一旦静下心来去了解，就会慢慢变得简单起来。\\n\\n当我们花了很多时间熟悉函数式编程，看懂 Erlang 语法并且明白其并发模型后，一个词总是不停跳出来—— OTP。不论什么语言，总有其一套管用写法来写码。而 Erlang 的惯用写法就是OTP。绝大部分 Erlang 项目都会遵守这套设计模式，那么下一个挑战则是理解OTP这套设计模式，并且用这套设计模式来写 Erlang 代码。\\n\\n又过了一段时间，当我们掌握了 OTP，写了很牛的 Erlang 程序，将其发布到生产环境中，然后服务器挂了，不得不调试找 bug，看erl_crash.dump。这时候会不可避免的发现必须要更深入了解 Erlang 的内核才能明白为啥会宕机——这个内核就是 Erlang 的虚拟机，也叫 BEAM。而这玩意是用 C 实现的，我去。\\n\\n以上， Erlang 很难。即便是大牛，也要数月到几年的时间才能慢慢熟悉，甚至十年以上才能慢慢游刃有余。不过倘若真是钻研到这个境界， Erlang 也就不重要了。Joe老爷子说，他年轻时候写过太多代码了，他只花了30年时间来明白什么时候不去写代码，而是思考问题。大神的境界get不到~\\n\\n但是，从另一个角度讲， Erlang 却很简单。 Erlang 其实是一门很小的语言，在某种程度上讲，我真希望 Erlang 能支持更多的语法糖和函数，这样写起平时的业务逻辑也能简单不少。Joe老爷子说，Erlang 的核心其实就是6个函数，真正搞懂它们，你就明白 Erlang 的世界观了。所以接下来，我们就来看看这6个函数。\\n\\n# 了解 Erlang\\nErlang 的世界中充满了进程，很多很多进程。我们暂时不用计算技术语，而是看看身边的世界。我们的世界充满了人，很多很多人。每个人都有一个大脑，里面包含了仅属于我们自己的记忆。我不知道你脑子里面在想什么，你不知道我脑子里在想什么，除非我问你，”约吗？“。你说：”约“。我们两个的记忆分别产生了些许变化。\\n\\n从我们出生到现在，我们一直在维护大脑中的这份记忆，随着与外界的不断交互我们不停地在更新着这份记忆。我们学到很多与人打交道的方式，我们说话、写信、发短信、打电话。我们给别人留个字条，然后干自己的事去了；或者给人发个微信，然后接着上网吃瓜。这就是异步消息传递。\\n\\nErlang 的世界和我们的真实世界很像。每个 Erlang 进程维护着自己独有的内存，别的进程无法访问其内部状态，除非它们互发消息进行交流。所有的消息传递都是异步的，就像我们的现实世界。\\n\\n听起来很简单吧！代码写出来啥样？\\n```\\n1> spawn(foo,hello,[]).\\n<0.70.0>\\n```\\n这样就会创建一个新的进程，调用foo:hello()。进程一旦执行完这个函数就会死掉，将所有分配到的内存还给BEAM。\\n\\n如果你想创建两个进程同时做事，只需spawn两次：\\n```\\n1> spawn(foo,hello,[]).\\n<0.70.0>\\n2> spawn(foo,hello,[]).\\n<0.71.0>\\n```\\n\\n这将创建两个进程并发调用foo:hello()。这就是 Erlang 的并发模型——也叫参与者模式 (Actor model)。\\n\\n如果你想整100个进程同时做事，调用spawn 100次即可。简单粗暴。\\n\\n现在我们知道如何创建进程，接下来是给它发消息。\\n\\n```\\n1> Pid = spawn(foo,loop,[]).\\n<0.80.0>\\n2> Pid ! hello.\\nhello\\n```\\n\\n这里我们启动一个进程调用 foo:loop()。我们假设这个loop函数会递归调用自己，这样我们的进程不会一下就死掉。spawn 会返回一个进程ID <0.80.0>，我们将其绑定到 Pid 变量中，并向其发个消息 hello。 Erlang 里用惊叹号 ! 发消息。好了，以上就是异步消息发送。这也是 Erlang 中两个进程之间交流的唯一手段。\\n\\n当消息被发给某进程后，该进程如何收消息呢？\\n\\n```\\n1> Pid = spawn(fun() ->\\n1>         receive\\n1>           hello -> io:format(\\\"Got hello message~n\\\")\\n1>         end\\n1>       end).<0.86.0>\\n2> Pid ! hello.\\nGot hello message\\nhello\\n```\\n\\n用 receive 来收消息。你可以在这里用模式匹配来匹配你想要接收的信息，忽略其他的消息。在这个例子中，我们只接收消息 hello。\\n\\n我们平时会记不住朋友的电话，所以我们用通讯录给电话号码加个名字。在 Erlang 中也没有必要记住每个进程的 Pid，给其注册个名字即可以后用名字来访问之。\\n\\n```\\n1> Pid = spawn(fun() -> receive hello -> io:format(\\\"Got hello message~n\\\") end end).\\n<0.93.0>\\n2> register(foo,Pid).\\ntrue\\n3> foo ! hello.\\nGot hello message\\nhello\\n```\\n\\n只需调用 register(Name,Pid) 即可给任何进程注册名字。之后我们可以用该名字给进程发消息。\\n\\n当我们给某进程注册了名字后，我们也能通过查找通讯录来找到其Pid。\\n```\\n1> register(foo,spawn(fun() -> receive hello -> hello end end)).\\ntrue\\n2> whereis(foo).\\n<0.102.0>\\n```\\n\\n最后，一个进程可以通过调用 self() 来找到自己的Pid。\\n\\n```\\n1> self().\\n<0.90.0>\\n```\\n\\n以上6个函数就这么简单，再多也没有了。spawn, send, receive, register, whereis 和 self。就这6个函数，组成 Erlang 的世界观。Joe老爷子说，理解 Erlang 并不需要去看多少项目或者代码，仅仅搞懂这几个函数就行了。他见过有些人写过上万行 Erlang 代码但是却没有真正理解 Erlang 的世界观。别这么做，从这些简单的函数入手。\\n\\n# Erlang 怎么学?\\n用个万用答案：因人而异。有人喜欢读书学，有人喜欢做个项目来学。\\n\\n我个人一开始是接触 Elixir 。那会 Elixir 还很 young 很 simple, sometimes naive。我拜读了各种 Elixir 的书、博客、官方文档。做了不少项目，写了不少码，参加当地的 meetup，将所学的及时分享出去。将近一年到一个地步就是感觉也学了不少 Elixir 了但是感觉老少点啥。就像学开车我学遍全国各大驾校，但是当脚踩油门到车往前进这中间都发生啥事了还是一无所知。要想成为老司机就不得不要了解发动机的构造。而 Erlang 就是这个发动机。于是乎跳出舒适圈,看了两本 Erlang 经典，有幸见到作者还要了签名，飞到三番，向Joe老爷子本人求学 Erlang 。现在在看官方文档和源码，内中蕴含巨大财富。\\n\\n我一直记得那个画面，在三月三番的那个阳光明媚的午后，Joe老爷子面带微笑，和蔼地描述着他所构建的 Erlang 世界观，简单又优美。当我越了解 Erlang ，就越能体会到这点。\\n\\n希望你能透过这篇小文从另一个角度认识 Erlang 。其实 Erlang 很简单。\\n\\n祝入坑愉快。\\n\\n![Joe Armstrong](https://mmbiz.qpic.cn/mmbiz_jpg/SER9L29WQ0ibTzMqib7HdGOAhRxG3lXHW8Ul0lgmjEoMnUIsQxibD1fDGuzgic1Nbibl2DR4WW5wm0KKNYT4hgZWhcQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1)\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>原文：<a href=\"https://mp.weixin.qq.com/s/x-W6aqyddNdp4PIrb8qB9A\">https://mp.weixin.qq.com/s/x-W6aqyddNdp4PIrb8qB9A</a></p>\n<blockquote>\n<p>程序君按：小山是一个很勤勉，求知欲很强的工程师，硬磕了不少 erlang 的底层实现 —— 前一段时间他搞懂了整个 erlang release 的过程，喜滋滋给我这种还活在 distillery 荫庇下的小确幸讲解。这篇文章是他在《程序人生》的处女稿，从另一个角度跟大家介绍一下 erlang。虽然我之前也也写过一篇介绍 上帝说：要有一门面向未来的语言，于是有了 erlang。但那篇过于笼统，没有专精一点，而他这篇，从六个基础函数讲起，深入浅出，拨开紫烟，把一座神秘美妙的香炉峰呈现在你的面前。</p>\n</blockquote>\n<blockquote>\n<p>以下正文。</p>\n</blockquote>\n<p>想了半天憋出这么个题目来，这也的确只是一篇入坑文。之前程序君写过一篇 Erlang 文章，我用谷歌翻译出来给 Joe Armstrong 老爷子看，老爷子看后大加赞赏，说这家伙搞懂 Erlang 了,我要和他约一组，于是就有了程序君与Joe老爷子对话这篇文章。这篇入坑指南很短，尝试从另一个角度认识 Erlang 。</p>\n<h1 id=\"erlang\">Erlang 难吗?</h1>\n<p>难，也不难。</p>\n<p>大部分人学习编程是从面向对象过来的。 Erlang 是一门函数式编程语言。写码时候的思维方式和传统的面向对象还是有很大差别的。这算是第一个挑战。</p>\n<p>第二个挑战是， Erlang 的语法比较奇怪。当然这点因人而异，不过对于看惯了 Java / C++ / Ruby 的我们来说，第一次看见 Erlang 的程序是有些少许不适应。 Erlang 是 Joe 老爷子和他的两个同事 1986 年做的项目，受到一个叫做 Prolog 的语言的影响很深。Prolog 大部分人可能都没听过，更别说用过了，我特地搜了下 Prolog，跟 Erlang 绝对是一个亲妈生的。我问 Joe 为啥是 Prolog，老爷子说因为他 C 写特烂所以就用 Prolog 实现的初版 Erlang 。。。对于我来说， Erlang 的语法看着真是有点晕菜，所以一直特意没去碰它。不过之后用了一段时间 Erlang 之后，语法渐渐变得亲切可爱起来了，毕竟他只是一个语法，熟悉了就没那么可怕了。</p>\n<p>接下来的挑战是并发。并发概念不难，但要把它搞对很难，尤其在 C 中。而并发在 Erlang 中巨简单，只要你理解了 Erlang 的核心（下面会讲）。我们的大脑会将我们不了解的东西无限放大，会觉得怎么都搞不定。但是一旦静下心来去了解，就会慢慢变得简单起来。</p>\n<p>当我们花了很多时间熟悉函数式编程，看懂 Erlang 语法并且明白其并发模型后，一个词总是不停跳出来—— OTP。不论什么语言，总有其一套管用写法来写码。而 Erlang 的惯用写法就是OTP。绝大部分 Erlang 项目都会遵守这套设计模式，那么下一个挑战则是理解OTP这套设计模式，并且用这套设计模式来写 Erlang 代码。</p>\n<p>又过了一段时间，当我们掌握了 OTP，写了很牛的 Erlang 程序，将其发布到生产环境中，然后服务器挂了，不得不调试找 bug，看erl_crash.dump。这时候会不可避免的发现必须要更深入了解 Erlang 的内核才能明白为啥会宕机——这个内核就是 Erlang 的虚拟机，也叫 BEAM。而这玩意是用 C 实现的，我去。</p>\n<p>以上， Erlang 很难。即便是大牛，也要数月到几年的时间才能慢慢熟悉，甚至十年以上才能慢慢游刃有余。不过倘若真是钻研到这个境界， Erlang 也就不重要了。Joe老爷子说，他年轻时候写过太多代码了，他只花了30年时间来明白什么时候不去写代码，而是思考问题。大神的境界get不到~</p>\n<p>但是，从另一个角度讲， Erlang 却很简单。 Erlang 其实是一门很小的语言，在某种程度上讲，我真希望 Erlang 能支持更多的语法糖和函数，这样写起平时的业务逻辑也能简单不少。Joe老爷子说，Erlang 的核心其实就是6个函数，真正搞懂它们，你就明白 Erlang 的世界观了。所以接下来，我们就来看看这6个函数。</p>\n<h1 id=\"erlang\">了解 Erlang</h1>\n<p>Erlang 的世界中充满了进程，很多很多进程。我们暂时不用计算技术语，而是看看身边的世界。我们的世界充满了人，很多很多人。每个人都有一个大脑，里面包含了仅属于我们自己的记忆。我不知道你脑子里面在想什么，你不知道我脑子里在想什么，除非我问你，”约吗？“。你说：”约“。我们两个的记忆分别产生了些许变化。</p>\n<p>从我们出生到现在，我们一直在维护大脑中的这份记忆，随着与外界的不断交互我们不停地在更新着这份记忆。我们学到很多与人打交道的方式，我们说话、写信、发短信、打电话。我们给别人留个字条，然后干自己的事去了；或者给人发个微信，然后接着上网吃瓜。这就是异步消息传递。</p>\n<p>Erlang 的世界和我们的真实世界很像。每个 Erlang 进程维护着自己独有的内存，别的进程无法访问其内部状态，除非它们互发消息进行交流。所有的消息传递都是异步的，就像我们的现实世界。</p>\n<p>听起来很简单吧！代码写出来啥样？</p>\n<pre><code>1&gt; spawn(foo,hello,[]).\n&lt;0.70.0&gt;\n</code></pre>\n<p>这样就会创建一个新的进程，调用foo:hello()。进程一旦执行完这个函数就会死掉，将所有分配到的内存还给BEAM。</p>\n<p>如果你想创建两个进程同时做事，只需spawn两次：</p>\n<pre><code>1&gt; spawn(foo,hello,[]).\n&lt;0.70.0&gt;\n2&gt; spawn(foo,hello,[]).\n&lt;0.71.0&gt;\n</code></pre>\n<p>这将创建两个进程并发调用foo:hello()。这就是 Erlang 的并发模型——也叫参与者模式 (Actor model)。</p>\n<p>如果你想整100个进程同时做事，调用spawn 100次即可。简单粗暴。</p>\n<p>现在我们知道如何创建进程，接下来是给它发消息。</p>\n<pre><code>1&gt; Pid = spawn(foo,loop,[]).\n&lt;0.80.0&gt;\n2&gt; Pid ! hello.\nhello\n</code></pre>\n<p>这里我们启动一个进程调用 foo:loop()。我们假设这个loop函数会递归调用自己，这样我们的进程不会一下就死掉。spawn 会返回一个进程ID &lt;0.80.0&gt;，我们将其绑定到 Pid 变量中，并向其发个消息 hello。 Erlang 里用惊叹号 ! 发消息。好了，以上就是异步消息发送。这也是 Erlang 中两个进程之间交流的唯一手段。</p>\n<p>当消息被发给某进程后，该进程如何收消息呢？</p>\n<pre><code>1&gt; Pid = spawn(fun() -&gt;\n1&gt;         receive\n1&gt;           hello -&gt; io:format(&quot;Got hello message~n&quot;)\n1&gt;         end\n1&gt;       end).&lt;0.86.0&gt;\n2&gt; Pid ! hello.\nGot hello message\nhello\n</code></pre>\n<p>用 receive 来收消息。你可以在这里用模式匹配来匹配你想要接收的信息，忽略其他的消息。在这个例子中，我们只接收消息 hello。</p>\n<p>我们平时会记不住朋友的电话，所以我们用通讯录给电话号码加个名字。在 Erlang 中也没有必要记住每个进程的 Pid，给其注册个名字即可以后用名字来访问之。</p>\n<pre><code>1&gt; Pid = spawn(fun() -&gt; receive hello -&gt; io:format(&quot;Got hello message~n&quot;) end end).\n&lt;0.93.0&gt;\n2&gt; register(foo,Pid).\ntrue\n3&gt; foo ! hello.\nGot hello message\nhello\n</code></pre>\n<p>只需调用 register(Name,Pid) 即可给任何进程注册名字。之后我们可以用该名字给进程发消息。</p>\n<p>当我们给某进程注册了名字后，我们也能通过查找通讯录来找到其Pid。</p>\n<pre><code>1&gt; register(foo,spawn(fun() -&gt; receive hello -&gt; hello end end)).\ntrue\n2&gt; whereis(foo).\n&lt;0.102.0&gt;\n</code></pre>\n<p>最后，一个进程可以通过调用 self() 来找到自己的Pid。</p>\n<pre><code>1&gt; self().\n&lt;0.90.0&gt;\n</code></pre>\n<p>以上6个函数就这么简单，再多也没有了。spawn, send, receive, register, whereis 和 self。就这6个函数，组成 Erlang 的世界观。Joe老爷子说，理解 Erlang 并不需要去看多少项目或者代码，仅仅搞懂这几个函数就行了。他见过有些人写过上万行 Erlang 代码但是却没有真正理解 Erlang 的世界观。别这么做，从这些简单的函数入手。</p>\n<h1 id=\"erlang\">Erlang 怎么学?</h1>\n<p>用个万用答案：因人而异。有人喜欢读书学，有人喜欢做个项目来学。</p>\n<p>我个人一开始是接触 Elixir 。那会 Elixir 还很 young 很 simple, sometimes naive。我拜读了各种 Elixir 的书、博客、官方文档。做了不少项目，写了不少码，参加当地的 meetup，将所学的及时分享出去。将近一年到一个地步就是感觉也学了不少 Elixir 了但是感觉老少点啥。就像学开车我学遍全国各大驾校，但是当脚踩油门到车往前进这中间都发生啥事了还是一无所知。要想成为老司机就不得不要了解发动机的构造。而 Erlang 就是这个发动机。于是乎跳出舒适圈,看了两本 Erlang 经典，有幸见到作者还要了签名，飞到三番，向Joe老爷子本人求学 Erlang 。现在在看官方文档和源码，内中蕴含巨大财富。</p>\n<p>我一直记得那个画面，在三月三番的那个阳光明媚的午后，Joe老爷子面带微笑，和蔼地描述着他所构建的 Erlang 世界观，简单又优美。当我越了解 Erlang ，就越能体会到这点。</p>\n<p>希望你能透过这篇小文从另一个角度认识 Erlang 。其实 Erlang 很简单。</p>\n<p>祝入坑愉快。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/SER9L29WQ0ibTzMqib7HdGOAhRxG3lXHW8Ul0lgmjEoMnUIsQxibD1fDGuzgic1Nbibl2DR4WW5wm0KKNYT4hgZWhcQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1\" alt=\"Joe Armstrong\"></p>\n</div>","amp":null,"plaintext":"原文：https://mp.weixin.qq.com/s/x-W6aqyddNdp4PIrb8qB9A\n\n程序君按：小山是一个很勤勉，求知欲很强的工程师，硬磕了不少 erlang 的底层实现 —— 前一段时间他搞懂了整个 erlang release\n的过程，喜滋滋给我这种还活在 distillery 荫庇下的小确幸讲解。这篇文章是他在《程序人生》的处女稿，从另一个角度跟大家介绍一下\nerlang。虽然我之前也也写过一篇介绍 上帝说：要有一门面向未来的语言，于是有了\nerlang。但那篇过于笼统，没有专精一点，而他这篇，从六个基础函数讲起，深入浅出，拨开紫烟，把一座神秘美妙的香炉峰呈现在你的面前。\n\n以下正文。\n\n想了半天憋出这么个题目来，这也的确只是一篇入坑文。之前程序君写过一篇 Erlang 文章，我用谷歌翻译出来给 Joe Armstrong\n老爷子看，老爷子看后大加赞赏，说这家伙搞懂 Erlang 了,我要和他约一组，于是就有了程序君与Joe老爷子对话这篇文章。这篇入坑指南很短，尝试从另一个角度认识\nErlang 。\n\nErlang 难吗?\n难，也不难。\n\n大部分人学习编程是从面向对象过来的。 Erlang 是一门函数式编程语言。写码时候的思维方式和传统的面向对象还是有很大差别的。这算是第一个挑战。\n\n第二个挑战是， Erlang 的语法比较奇怪。当然这点因人而异，不过对于看惯了 Java / C++ / Ruby 的我们来说，第一次看见 Erlang\n的程序是有些少许不适应。 Erlang 是 Joe 老爷子和他的两个同事 1986 年做的项目，受到一个叫做 Prolog 的语言的影响很深。Prolog\n大部分人可能都没听过，更别说用过了，我特地搜了下 Prolog，跟 Erlang 绝对是一个亲妈生的。我问 Joe 为啥是 Prolog，老爷子说因为他 C\n写特烂所以就用 Prolog 实现的初版 Erlang 。。。对于我来说， Erlang 的语法看着真是有点晕菜，所以一直特意没去碰它。不过之后用了一段时间\nErlang 之后，语法渐渐变得亲切可爱起来了，毕竟他只是一个语法，熟悉了就没那么可怕了。\n\n接下来的挑战是并发。并发概念不难，但要把它搞对很难，尤其在 C 中。而并发在 Erlang 中巨简单，只要你理解了 Erlang\n的核心（下面会讲）。我们的大脑会将我们不了解的东西无限放大，会觉得怎么都搞不定。但是一旦静下心来去了解，就会慢慢变得简单起来。\n\n当我们花了很多时间熟悉函数式编程，看懂 Erlang 语法并且明白其并发模型后，一个词总是不停跳出来—— OTP。不论什么语言，总有其一套管用写法来写码。而\nErlang 的惯用写法就是OTP。绝大部分 Erlang 项目都会遵守这套设计模式，那么下一个挑战则是理解OTP这套设计模式，并且用这套设计模式来写\nErlang 代码。\n\n又过了一段时间，当我们掌握了 OTP，写了很牛的 Erlang 程序，将其发布到生产环境中，然后服务器挂了，不得不调试找\nbug，看erl_crash.dump。这时候会不可避免的发现必须要更深入了解 Erlang 的内核才能明白为啥会宕机——这个内核就是 Erlang\n的虚拟机，也叫 BEAM。而这玩意是用 C 实现的，我去。\n\n以上， Erlang 很难。即便是大牛，也要数月到几年的时间才能慢慢熟悉，甚至十年以上才能慢慢游刃有余。不过倘若真是钻研到这个境界， Erlang\n也就不重要了。Joe老爷子说，他年轻时候写过太多代码了，他只花了30年时间来明白什么时候不去写代码，而是思考问题。大神的境界get不到~\n\n但是，从另一个角度讲， Erlang 却很简单。 Erlang 其实是一门很小的语言，在某种程度上讲，我真希望 Erlang\n能支持更多的语法糖和函数，这样写起平时的业务逻辑也能简单不少。Joe老爷子说，Erlang 的核心其实就是6个函数，真正搞懂它们，你就明白 Erlang\n的世界观了。所以接下来，我们就来看看这6个函数。\n\n了解 Erlang\nErlang\n的世界中充满了进程，很多很多进程。我们暂时不用计算技术语，而是看看身边的世界。我们的世界充满了人，很多很多人。每个人都有一个大脑，里面包含了仅属于我们自己的记忆。我不知道你脑子里面在想什么，你不知道我脑子里在想什么，除非我问你，”约吗？“。你说：”约“。我们两个的记忆分别产生了些许变化。\n\n从我们出生到现在，我们一直在维护大脑中的这份记忆，随着与外界的不断交互我们不停地在更新着这份记忆。我们学到很多与人打交道的方式，我们说话、写信、发短信、打电话。我们给别人留个字条，然后干自己的事去了；或者给人发个微信，然后接着上网吃瓜。这就是异步消息传递。\n\nErlang 的世界和我们的真实世界很像。每个 Erlang\n进程维护着自己独有的内存，别的进程无法访问其内部状态，除非它们互发消息进行交流。所有的消息传递都是异步的，就像我们的现实世界。\n\n听起来很简单吧！代码写出来啥样？\n\n1> spawn(foo,hello,[]).\n<0.70.0>\n\n\n这样就会创建一个新的进程，调用foo:hello()。进程一旦执行完这个函数就会死掉，将所有分配到的内存还给BEAM。\n\n如果你想创建两个进程同时做事，只需spawn两次：\n\n1> spawn(foo,hello,[]).\n<0.70.0>\n2> spawn(foo,hello,[]).\n<0.71.0>\n\n\n这将创建两个进程并发调用foo:hello()。这就是 Erlang 的并发模型——也叫参与者模式 (Actor model)。\n\n如果你想整100个进程同时做事，调用spawn 100次即可。简单粗暴。\n\n现在我们知道如何创建进程，接下来是给它发消息。\n\n1> Pid = spawn(foo,loop,[]).\n<0.80.0>\n2> Pid ! hello.\nhello\n\n\n这里我们启动一个进程调用 foo:loop()。我们假设这个loop函数会递归调用自己，这样我们的进程不会一下就死掉。spawn 会返回一个进程ID\n<0.80.0>，我们将其绑定到 Pid 变量中，并向其发个消息 hello。 Erlang 里用惊叹号 ! 发消息。好了，以上就是异步消息发送。这也是\nErlang 中两个进程之间交流的唯一手段。\n\n当消息被发给某进程后，该进程如何收消息呢？\n\n1> Pid = spawn(fun() ->\n1>         receive\n1>           hello -> io:format(\"Got hello message~n\")\n1>         end\n1>       end).<0.86.0>\n2> Pid ! hello.\nGot hello message\nhello\n\n\n用 receive 来收消息。你可以在这里用模式匹配来匹配你想要接收的信息，忽略其他的消息。在这个例子中，我们只接收消息 hello。\n\n我们平时会记不住朋友的电话，所以我们用通讯录给电话号码加个名字。在 Erlang 中也没有必要记住每个进程的 Pid，给其注册个名字即可以后用名字来访问之。\n\n1> Pid = spawn(fun() -> receive hello -> io:format(\"Got hello message~n\") end end).\n<0.93.0>\n2> register(foo,Pid).\ntrue\n3> foo ! hello.\nGot hello message\nhello\n\n\n只需调用 register(Name,Pid) 即可给任何进程注册名字。之后我们可以用该名字给进程发消息。\n\n当我们给某进程注册了名字后，我们也能通过查找通讯录来找到其Pid。\n\n1> register(foo,spawn(fun() -> receive hello -> hello end end)).\ntrue\n2> whereis(foo).\n<0.102.0>\n\n\n最后，一个进程可以通过调用 self() 来找到自己的Pid。\n\n1> self().\n<0.90.0>\n\n\n以上6个函数就这么简单，再多也没有了。spawn, send, receive, register, whereis 和 self。就这6个函数，组成\nErlang 的世界观。Joe老爷子说，理解 Erlang 并不需要去看多少项目或者代码，仅仅搞懂这几个函数就行了。他见过有些人写过上万行 Erlang\n代码但是却没有真正理解 Erlang 的世界观。别这么做，从这些简单的函数入手。\n\nErlang 怎么学?\n用个万用答案：因人而异。有人喜欢读书学，有人喜欢做个项目来学。\n\n我个人一开始是接触 Elixir 。那会 Elixir 还很 young 很 simple, sometimes naive。我拜读了各种 Elixir\n的书、博客、官方文档。做了不少项目，写了不少码，参加当地的 meetup，将所学的及时分享出去。将近一年到一个地步就是感觉也学了不少 Elixir\n了但是感觉老少点啥。就像学开车我学遍全国各大驾校，但是当脚踩油门到车往前进这中间都发生啥事了还是一无所知。要想成为老司机就不得不要了解发动机的构造。而\nErlang 就是这个发动机。于是乎跳出舒适圈,看了两本 Erlang 经典，有幸见到作者还要了签名，飞到三番，向Joe老爷子本人求学 Erlang\n。现在在看官方文档和源码，内中蕴含巨大财富。\n\n我一直记得那个画面，在三月三番的那个阳光明媚的午后，Joe老爷子面带微笑，和蔼地描述着他所构建的 Erlang 世界观，简单又优美。当我越了解 Erlang\n，就越能体会到这点。\n\n希望你能透过这篇小文从另一个角度认识 Erlang 。其实 Erlang 很简单。\n\n祝入坑愉快。","feature_image":"https://images.unsplash.com/photo-1533162507191-d90c625b2640?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ&s=523ed77a8fbbfadf0e3c29d334f76fb1","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-08-03 05:01:12","created_by":"1","updated_at":"2018-08-03 05:14:56","updated_by":"1","published_at":"2018-08-03 05:13:48","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5b69afe26e01830001a9c2bf","uuid":"760a54bf-fc82-4769-93d1-2139bc3a28dc","title":"AWS open guide","slug":"aws-open-guide","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Not an offical AWS guide, but summarize and useful.\\nhttps://github.com/open-guides/og-aws\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Not an offical AWS guide, but summarize and useful.<br>\n<a href=\"https://github.com/open-guides/og-aws\">https://github.com/open-guides/og-aws</a></p>\n</div>","amp":null,"plaintext":"Not an offical AWS guide, but summarize and useful.\nhttps://github.com/open-guides/og-aws","feature_image":"https://images.unsplash.com/photo-1533567120930-ad223a6ac8e6?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ&s=ec404a49040b23c36acf0d5d29b71a19","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-08-07 14:42:42","created_by":"1","updated_at":"2018-08-07 14:45:08","updated_by":"1","published_at":"2018-08-07 14:44:53","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5bd9313c6e01830001a9c2c7","uuid":"0c071c39-9238-4e50-80e5-b2dacbebac10","title":"nginx 'intercept errors' and 'recursive error pages'","slug":"nginx","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Previous we serverd images from a staic server, the url like: http://static.mycompany.com/resources/r/?d=20181029&i=1317166669&w=550 , which is apache httpd on aws EC2 box and resize images with php.\\nd: image date\\ni: image id\\nw: image width\\nThe apache find the original image from aws EFS (mount to EC2 box) and rsized it with specified width save to EC2 local and return to client.\\n\\nWe plan save images to s3 instead of EFS for saving cost. And removed apache EC2 box, resized image in lambda.\\nThe system diagram like below:\\n\\n![aws resize image](https://v1q1vw.bl.files.1drv.com/y4mlFSJ0zQHxQ32EfSHyevl4-C7AlsYnCqHtOawsXDf7yjCHarlpcMRyInGg0IMYyy783IU-mh3jFkms7j7G83-4I2m1LBfCiMspmHLf4kx8-Xb1DnVoVMzhF7ypPDiiSOsX81hxANLjan_Vwto99liXJwKg3kbLOagLjAL_hyLWuckg6FwfwAHohiVTegIxK_Jm70SDftST6qMzzDvpU8y8A?width=1780&height=980&cropmode=none)\\n\\nThe images work flow:\\n1. user browser access aws cloudfront get images use original url (like: http://static.mycompany.com/resources/r/?d=20181029&i=1317166669&w=550) . If hit from cloudfront cache reutn it. Or couldfront send the request url to nginx (in our aws vpc).\\n2. nginx convert the url to thumb s3 bucket url (thumb bucket store resized images), url like: https://s3.amazonaws.com/bucketname/2018/10/29/i13171.jpg. Use proxy pass accss thumb s3 url.\\n3. When get image from thumb s3 bucket, return it to cloudfront. When image not find, thumb s3 bucket trigger a 302 redirect to an api gateway url. Nginx deal with the 302 response, proxy pass access api gateway.\\n4. api gateway backend is an image resize lambda, resize lambda get original image from origin images s3 bucket, then resize image and save it to thumb s3 bucket. After resize it trigger an 301 redirect to thumb s3 url, nginx deal with 301 thumb s3 url, proxy pass access thumb s3 url.\\n\\nThe nginx proxy pass config like below:\\n```\\nserver {\\n  listen  80;\\n  server_name static.mycompany.com;\\n  # deal with https proxy pass\\n  proxy_ssl_server_name on;\\n  # deal with 301, 302, 404 reponse in nginx\\n  proxy_intercept_errors on;\\n  # deal with recursive error pages\\n  recursive_error_pages on;\\n  \\n  location /resources/r/ {\\n    error_page 404 = @handle_404;\\n    set $image_d '$arg_d';\\n    if ($image_d ~ \\\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\\\") {\\n      set $image_year $1;\\n      set $image_month $2;\\n      set $image_day $3;\\n    }\\n    if ($image_day = \\\"\\\") {\\n      return 404;\\n    }\\n    set $file_name 'img';\\n    if ($arg_r != \\\"\\\") {\\n      set $file_name '$file_name-r$arg_r';\\n    }\\n    ...\\n    et $s3_base 'http://bucketname.s3.amazonaws.com/';\\n    set $s3_url '$s3_base/$image_year/$image_month/$image_day/$file_name.JPG';\\n\\n    proxy_pass $s3_url;\\n    error_page 301 302 307 = @handle_apigateway_redirects;\\n  }\\n  \\n  location @handle_apigateway_redirects {\\n    set $saved_redirect_location '$upstream_http_location';\\n    proxy_pass $saved_redirect_location;\\n    error_page 301 302 307 = @handle_s3_redirects;\\n    error_page 404 = @handle_404;\\n  }\\n  \\n  location @handle_s3_redirects {\\n    set $saved_redirect_location $upstream_http_location;\\n    proxy_pass $saved_redirect_location;\\n  }\\n  \\n  location @handle_404 {\\n    set $default_image 'http://bucketname.s3.amazonaws.com/pixel.png';\\n    proxy_pass $default_image;\\n  }\\n```\\n\\nThe good point of this implementation:\\n1. In normal case, most images are dealed by cloudfront.\\n2. The reszied image generated on the fly. Only needed images invoke resized lambda. Resize image lambda and image bucket in same aws region.\\n\\nOther ref docs about AWS resized images:\\nhttps://aws.amazon.com/blogs/compute/resize-images-on-the-fly-with-amazon-s3-aws-lambda-and-amazon-api-gateway/\\n\\nhttps://aws.amazon.com/blogs/networking-and-content-delivery/resizing-images-with-amazon-cloudfront-lambdaedge-aws-cdn-blog/\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Previous we serverd images from a staic server, the url like: <a href=\"http://static.mycompany.com/resources/r/?d=20181029&amp;i=1317166669&amp;w=550\">http://static.mycompany.com/resources/r/?d=20181029&amp;i=1317166669&amp;w=550</a> , which is apache httpd on aws EC2 box and resize images with php.<br>\nd: image date<br>\ni: image id<br>\nw: image width<br>\nThe apache find the original image from aws EFS (mount to EC2 box) and rsized it with specified width save to EC2 local and return to client.</p>\n<p>We plan save images to s3 instead of EFS for saving cost. And removed apache EC2 box, resized image in lambda.<br>\nThe system diagram like below:</p>\n<p><img src=\"https://v1q1vw.bl.files.1drv.com/y4mlFSJ0zQHxQ32EfSHyevl4-C7AlsYnCqHtOawsXDf7yjCHarlpcMRyInGg0IMYyy783IU-mh3jFkms7j7G83-4I2m1LBfCiMspmHLf4kx8-Xb1DnVoVMzhF7ypPDiiSOsX81hxANLjan_Vwto99liXJwKg3kbLOagLjAL_hyLWuckg6FwfwAHohiVTegIxK_Jm70SDftST6qMzzDvpU8y8A?width=1780&amp;height=980&amp;cropmode=none\" alt=\"aws resize image\"></p>\n<p>The images work flow:</p>\n<ol>\n<li>user browser access aws cloudfront get images use original url (like: <a href=\"http://static.mycompany.com/resources/r/?d=20181029&amp;i=1317166669&amp;w=550\">http://static.mycompany.com/resources/r/?d=20181029&amp;i=1317166669&amp;w=550</a>) . If hit from cloudfront cache reutn it. Or couldfront send the request url to nginx (in our aws vpc).</li>\n<li>nginx convert the url to thumb s3 bucket url (thumb bucket store resized images), url like: <a href=\"https://s3.amazonaws.com/bucketname/2018/10/29/i13171.jpg\">https://s3.amazonaws.com/bucketname/2018/10/29/i13171.jpg</a>. Use proxy pass accss thumb s3 url.</li>\n<li>When get image from thumb s3 bucket, return it to cloudfront. When image not find, thumb s3 bucket trigger a 302 redirect to an api gateway url. Nginx deal with the 302 response, proxy pass access api gateway.</li>\n<li>api gateway backend is an image resize lambda, resize lambda get original image from origin images s3 bucket, then resize image and save it to thumb s3 bucket. After resize it trigger an 301 redirect to thumb s3 url, nginx deal with 301 thumb s3 url, proxy pass access thumb s3 url.</li>\n</ol>\n<p>The nginx proxy pass config like below:</p>\n<pre><code>server {\n  listen  80;\n  server_name static.mycompany.com;\n  # deal with https proxy pass\n  proxy_ssl_server_name on;\n  # deal with 301, 302, 404 reponse in nginx\n  proxy_intercept_errors on;\n  # deal with recursive error pages\n  recursive_error_pages on;\n  \n  location /resources/r/ {\n    error_page 404 = @handle_404;\n    set $image_d '$arg_d';\n    if ($image_d ~ &quot;(\\d{4})(\\d{2})(\\d{2})&quot;) {\n      set $image_year $1;\n      set $image_month $2;\n      set $image_day $3;\n    }\n    if ($image_day = &quot;&quot;) {\n      return 404;\n    }\n    set $file_name 'img';\n    if ($arg_r != &quot;&quot;) {\n      set $file_name '$file_name-r$arg_r';\n    }\n    ...\n    et $s3_base 'http://bucketname.s3.amazonaws.com/';\n    set $s3_url '$s3_base/$image_year/$image_month/$image_day/$file_name.JPG';\n\n    proxy_pass $s3_url;\n    error_page 301 302 307 = @handle_apigateway_redirects;\n  }\n  \n  location @handle_apigateway_redirects {\n    set $saved_redirect_location '$upstream_http_location';\n    proxy_pass $saved_redirect_location;\n    error_page 301 302 307 = @handle_s3_redirects;\n    error_page 404 = @handle_404;\n  }\n  \n  location @handle_s3_redirects {\n    set $saved_redirect_location $upstream_http_location;\n    proxy_pass $saved_redirect_location;\n  }\n  \n  location @handle_404 {\n    set $default_image 'http://bucketname.s3.amazonaws.com/pixel.png';\n    proxy_pass $default_image;\n  }\n</code></pre>\n<p>The good point of this implementation:</p>\n<ol>\n<li>In normal case, most images are dealed by cloudfront.</li>\n<li>The reszied image generated on the fly. Only needed images invoke resized lambda. Resize image lambda and image bucket in same aws region.</li>\n</ol>\n<p>Other ref docs about AWS resized images:<br>\n<a href=\"https://aws.amazon.com/blogs/compute/resize-images-on-the-fly-with-amazon-s3-aws-lambda-and-amazon-api-gateway/\">https://aws.amazon.com/blogs/compute/resize-images-on-the-fly-with-amazon-s3-aws-lambda-and-amazon-api-gateway/</a></p>\n<p><a href=\"https://aws.amazon.com/blogs/networking-and-content-delivery/resizing-images-with-amazon-cloudfront-lambdaedge-aws-cdn-blog/\">https://aws.amazon.com/blogs/networking-and-content-delivery/resizing-images-with-amazon-cloudfront-lambdaedge-aws-cdn-blog/</a></p>\n</div>","amp":null,"plaintext":"Previous we serverd images from a staic server, the url like: \nhttp://static.mycompany.com/resources/r/?d=20181029&i=1317166669&w=550\n[http://static.mycompany.com/resources/r/?d=20181029&i=1317166669&w=550]  ,\nwhich is apache httpd on aws EC2 box and resize images with php.\nd: image date\ni: image id\nw: image width\nThe apache find the original image from aws EFS (mount to EC2 box) and rsized it\nwith specified width save to EC2 local and return to client.\n\nWe plan save images to s3 instead of EFS for saving cost. And removed apache EC2\nbox, resized image in lambda.","feature_image":"https://images.unsplash.com/photo-1540849615499-5000b6b4bafc?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ&s=2be9b2ea2e3cf30c1d3292abf8f469bc","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-10-31 04:36:12","created_by":"1","updated_at":"2018-11-05 07:12:14","updated_by":"1","published_at":"2018-10-31 04:49:56","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5bd9e70a6e01830001a9c2ce","uuid":"9284ea16-2c1f-41fd-b7e6-ab0d958ae08f","title":"Use github as maven repo","slug":"use-github-as-maven-repo","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I want to find some free maven repo to store my jar files, but no good cadidate. After some googling there are some docs for make github as maven repo.\\nref docs:\\nhttps://stackoverflow.com/questions/14013644/hosting-a-maven-repository-on-github\\n\\nhttps://www.javacodegeeks.com/2014/09/hosting-a-maven-repository-on-github-with-sources-and-javadoc.html\\n\\nbelow is my steps:\\n\\n1. create a github project as maven repo, the name like \\\"maven-repo\\\".\\neg. I have a repo https://github.com/yren/maven-repo\\n\\n2. Use the github [site-maven-plugin](https://github.com/github/maven-plugins#readme) to push your artifacts to github\\n\\n2.1 First let maven deploy artifacts to your local target directory. Add below to your pom.xml:\\n\\n```\\n<distributionManagement>\\n    <repository>\\n      <id>internal.repo</id>\\n      <name>Temporary Staging Repository</name>\\n      <url>file://${project.build.directory}/mvn-repo</url>\\n    </repository>\\n</distributionManagement>\\n```\\n\\nNow try running `mvn clean deploy`. You'll see it deployed to your local **target/mvn-repo**\\n\\n2.2  The next step is upload that directory to GitHub\\n\\na. Config your `~/.m2/settings.xml` , add a github server as below:\\n```\\n<!-- Note: settings.xml only in your local machine. Don't let anyone know your github pwd -->\\n<servers>\\n    <server>\\n        <id>github</id>\\n        <username>$user</username>\\n        <password>$pwd</password>\\n    </server>\\n</servers>\\n```\\n**Note: settings.xml only  in your local machine, don't let anyone know your github pwd!!!**\\n\\nb. Config github [site-maven-plugin](https://github.com/github/maven-plugins#readme) upload artificats to github. add blow to your project's `pom.xml`\\n\\n```\\n<plugin>\\n        <groupId>com.github.github</groupId>\\n        <artifactId>site-maven-plugin</artifactId>\\n        <version>0.12</version>\\n        <configuration>\\n          <!-- git commit message -->\\n          <message>Maven artifacts for ${project.name} ${project.version}</message>\\n          <outputDirectory>${project.build.directory}/mvn-repo</outputDirectory>\\n          <branch>refs/heads/master</branch>\\n          <merge>true</merge>\\n          <includes><include>**/*</include></includes>\\n          <repositoryName>maven-repo</repositoryName>\\n         <repositoryOwner>$user</repositoryOwner>\\n          <server>github</server>\\n        </configuration>\\n        <executions>\\n          <execution>\\n            <goals>\\n              <goal>site</goal>\\n            </goals>\\n            <phase>deploy</phase>\\n          </execution>\\n        </executions>\\n</plugin>\\n```\\n\\nNow run `mvn clean deploy` again. You should see maven-deploy-plugin upload contents to github maven-repo\\n\\n3. Use you github repo dependency, in your project's `pom.xml` add below:\\n\\n```\\n<repositories>\\n    <repository>\\n        <id>yren-maven-repo</id>\\n        <url>https://raw.githubusercontent.com/yren/maven-repo/master/</url>\\n        <snapshots>\\n            <enabled>true</enabled>\\n            <updatePolicy>always</updatePolicy>\\n        </snapshots>\\n    </repository>\\n  </repositories>\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I want to find some free maven repo to store my jar files, but no good cadidate. After some googling there are some docs for make github as maven repo.<br>\nref docs:<br>\n<a href=\"https://stackoverflow.com/questions/14013644/hosting-a-maven-repository-on-github\">https://stackoverflow.com/questions/14013644/hosting-a-maven-repository-on-github</a></p>\n<p><a href=\"https://www.javacodegeeks.com/2014/09/hosting-a-maven-repository-on-github-with-sources-and-javadoc.html\">https://www.javacodegeeks.com/2014/09/hosting-a-maven-repository-on-github-with-sources-and-javadoc.html</a></p>\n<p>below is my steps:</p>\n<ol>\n<li>\n<p>create a github project as maven repo, the name like &quot;maven-repo&quot;.<br>\neg. I have a repo <a href=\"https://github.com/yren/maven-repo\">https://github.com/yren/maven-repo</a></p>\n</li>\n<li>\n<p>Use the github <a href=\"https://github.com/github/maven-plugins#readme\">site-maven-plugin</a> to push your artifacts to github</p>\n</li>\n</ol>\n<p>2.1 First let maven deploy artifacts to your local target directory. Add below to your pom.xml:</p>\n<pre><code>&lt;distributionManagement&gt;\n    &lt;repository&gt;\n      &lt;id&gt;internal.repo&lt;/id&gt;\n      &lt;name&gt;Temporary Staging Repository&lt;/name&gt;\n      &lt;url&gt;file://${project.build.directory}/mvn-repo&lt;/url&gt;\n    &lt;/repository&gt;\n&lt;/distributionManagement&gt;\n</code></pre>\n<p>Now try running <code>mvn clean deploy</code>. You'll see it deployed to your local <strong>target/mvn-repo</strong></p>\n<p>2.2  The next step is upload that directory to GitHub</p>\n<p>a. Config your <code>~/.m2/settings.xml</code> , add a github server as below:</p>\n<pre><code>&lt;!-- Note: settings.xml only in your local machine. Don't let anyone know your github pwd --&gt;\n&lt;servers&gt;\n    &lt;server&gt;\n        &lt;id&gt;github&lt;/id&gt;\n        &lt;username&gt;$user&lt;/username&gt;\n        &lt;password&gt;$pwd&lt;/password&gt;\n    &lt;/server&gt;\n&lt;/servers&gt;\n</code></pre>\n<p><strong>Note: settings.xml only  in your local machine, don't let anyone know your github pwd!!!</strong></p>\n<p>b. Config github <a href=\"https://github.com/github/maven-plugins#readme\">site-maven-plugin</a> upload artificats to github. add blow to your project's <code>pom.xml</code></p>\n<pre><code>&lt;plugin&gt;\n        &lt;groupId&gt;com.github.github&lt;/groupId&gt;\n        &lt;artifactId&gt;site-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;0.12&lt;/version&gt;\n        &lt;configuration&gt;\n          &lt;!-- git commit message --&gt;\n          &lt;message&gt;Maven artifacts for ${project.name} ${project.version}&lt;/message&gt;\n          &lt;outputDirectory&gt;${project.build.directory}/mvn-repo&lt;/outputDirectory&gt;\n          &lt;branch&gt;refs/heads/master&lt;/branch&gt;\n          &lt;merge&gt;true&lt;/merge&gt;\n          &lt;includes&gt;&lt;include&gt;**/*&lt;/include&gt;&lt;/includes&gt;\n          &lt;repositoryName&gt;maven-repo&lt;/repositoryName&gt;\n         &lt;repositoryOwner&gt;$user&lt;/repositoryOwner&gt;\n          &lt;server&gt;github&lt;/server&gt;\n        &lt;/configuration&gt;\n        &lt;executions&gt;\n          &lt;execution&gt;\n            &lt;goals&gt;\n              &lt;goal&gt;site&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;phase&gt;deploy&lt;/phase&gt;\n          &lt;/execution&gt;\n        &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre>\n<p>Now run <code>mvn clean deploy</code> again. You should see maven-deploy-plugin upload contents to github maven-repo</p>\n<ol start=\"3\">\n<li>Use you github repo dependency, in your project's <code>pom.xml</code> add below:</li>\n</ol>\n<pre><code>&lt;repositories&gt;\n    &lt;repository&gt;\n        &lt;id&gt;yren-maven-repo&lt;/id&gt;\n        &lt;url&gt;https://raw.githubusercontent.com/yren/maven-repo/master/&lt;/url&gt;\n        &lt;snapshots&gt;\n            &lt;enabled&gt;true&lt;/enabled&gt;\n            &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;\n        &lt;/snapshots&gt;\n    &lt;/repository&gt;\n  &lt;/repositories&gt;\n</code></pre>\n</div>","amp":null,"plaintext":"I want to find some free maven repo to store my jar files, but no good cadidate.\nAfter some googling there are some docs for make github as maven repo.\nref docs:\nhttps://stackoverflow.com/questions/14013644/hosting-a-maven-repository-on-github\n\nhttps://www.javacodegeeks.com/2014/09/hosting-a-maven-repository-on-github-with-sources-and-javadoc.html\n\nbelow is my steps:\n\n 1. create a github project as maven repo, the name like \"maven-repo\".\n    eg. I have a repo https://github.com/yren/maven-repo\n    \n    \n 2. Use the github site-maven-plugin  to push your artifacts to github\n    \n    \n\n2.1 First let maven deploy artifacts to your local target directory. Add below\nto your pom.xml:\n\n<distributionManagement>\n    <repository>\n      <id>internal.repo</id>\n      <name>Temporary Staging Repository</name>\n      <url>file://${project.build.directory}/mvn-repo</url>\n    </repository>\n</distributionManagement>\n\n\nNow try running mvn clean deploy. You'll see it deployed to your local \ntarget/mvn-repo\n\n2.2 The next step is upload that directory to GitHub\n\na. Config your ~/.m2/settings.xml  , add a github server as below:\n\n<!-- Note: settings.xml only in your local machine. Don't let anyone know your github pwd -->\n<servers>\n    <server>\n        <id>github</id>\n        <username>$user</username>\n        <password>$pwd</password>\n    </server>\n</servers>\n\n\nNote: settings.xml only in your local machine, don't let anyone know your github\npwd!!!\n\nb. Config github site-maven-plugin  upload artificats to github. add blow to\nyour project's pom.xml\n\n<plugin>\n        <groupId>com.github.github</groupId>\n        <artifactId>site-maven-plugin</artifactId>\n        <version>0.12</version>\n        <configuration>\n          <!-- git commit message -->\n          <message>Maven artifacts for ${project.name} ${project.version}</message>\n          <outputDirectory>${project.build.directory}/mvn-repo</outputDirectory>\n          <branch>refs/heads/master</branch>\n          <merge>true</merge>\n          <includes><include>**/*</include></includes>\n          <repositoryName>maven-repo</repositoryName>\n         <repositoryOwner>$user</repositoryOwner>\n          <server>github</server>\n        </configuration>\n        <executions>\n          <execution>\n            <goals>\n              <goal>site</goal>\n            </goals>\n            <phase>deploy</phase>\n          </execution>\n        </executions>\n</plugin>\n\n\nNow run mvn clean deploy  again. You should see maven-deploy-plugin upload\ncontents to github maven-repo\n\n 3. Use you github repo dependency, in your project's pom.xml  add below:\n\n<repositories>\n    <repository>\n        <id>yren-maven-repo</id>\n        <url>https://raw.githubusercontent.com/yren/maven-repo/master/</url>\n        <snapshots>\n            <enabled>true</enabled>\n            <updatePolicy>always</updatePolicy>\n        </snapshots>\n    </repository>\n  </repositories>","feature_image":"https://images.unsplash.com/photo-1540945683332-481ad9bd5c94?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ&s=b506a6378a0ab240f3b209789fe704eb","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-10-31 17:31:54","created_by":"1","updated_at":"2018-11-28 15:15:11","updated_by":"1","published_at":"2018-10-31 17:36:50","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5bdfb2036e01830001a9c2d6","uuid":"3eff4777-2732-4cd5-845d-d34e259dde99","title":"François Chollet's personal reminders","slug":"keraszhi-fu-de-zhong-gao","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"[from url](https://mp.weixin.qq.com/s?__biz=MzU1NDA4NjU2MA==&mid=2247493601&idx=1&sn=3ed76b66c7568bef90251a247addcc43&chksm=fbea5e2ecc9dd73853cbd6a86cab04c04ecd569edb8899a28dee75c0e3c6c7b0879784ecd076&scene=27#wechat_redirect)\\n\\n[original url](https://medium.com/s/story/notes-to-myself-on-software-engineering-c890f16f4e4d)\\n\\n# 关于开发过程\\n\\n1. 代码不仅仅是用来运行的。代码也是跨团队交流的一种方式，是向他人描述问题解决方案的一种方式。选择恰当的自解释变量名，添加注释来描述所有隐含的内容。\\n\\n2. 不要渴望你的 pull request 能为你赢得多少名声，而要多关注你的 pull request 能为你的用户和社区做些什么。要不惜一切代价避免“功利性的贡献”。如果你提交的功能对于这个产品想要达到的目的没有明显的帮助，就不要添加任何功能。\\n\\n3. 品味也适用于代码。保持对简单性的偏爱。\\n\\n4. 要学会说“不”——仅仅因为有人要求做某个特性，并不意味着你就应该这么做。每个特性都有一个超出初始实现的成本：维护成本、文档成本和用户的认知成本。我们要时刻提醒自己：我们真的应该这样做吗? 通常，答案是否定的。\\n\\n5. 当你准备答应实现一个新的使用场景时，请记住，仅从字面意思理解实现用户的需求通常不是最佳选择。用户关注的仅仅是他们自己的特定使用场景，你必须从整个项目的角度出发，兼顾整体性和原则性。通常，正确的做法是在现有特性的基础上做扩展。\\n\\n6. 不断进行持续集成，并以完整的单元测试覆盖为目标。确保你处在一个可以自信地编写代码的环境中；如果不是这样，那么你需要从构建正确的基础设施开始。\\n\\n7. 可以不事先计划好一切。先试一下，看看结果如何。尽早对错误的选择进行回退。当然，前提是确保你的开发环境可以做到这一点。\\n\\n8.好的软件使困难的事情变得简单。问题一开始看起来很困难，并不意味着解决方案必须很复杂或者很难操作。在编写任何代码之前，请确保你所选择的解决方案已经简单到不能再简单。\\n\\n9. 避免隐式规则。应该明确说明你自己开发的隐式规则，并与他人共享。你应该在软件中尝试自动化任何可以自动化的工作流.\\n\\n10. 在设计过程中应该考虑你选择方案的总体影响\\n\\n# API 的设计\\n1. 你的 API 是有用户的，因此它事关用户体验。在你做的每一个决定中，都要考虑到用户。要站在用户的角度思考问题，无论他们是初学者还是有经验的开发人员。\\n\\n2. 总是想着让你的用户在使用 API 的过程中尽量减少认知负荷。自动化可以自动化的东西，最小化用户需要做的操作和选择，不显示不重要的选项，设计简单一致的工作流，反映简单一致的思维模型。\\n\\n3. 简单的事情要简单处理，复杂的事情应该尽量简单化。不要为了少量特殊的使用场景而增加普通使用场景的认知负荷，即使是最低限度的。\\n\\n4. 如果工作流的认知负荷足够低，那么用户在使用一到两次之后，应该可以凭记忆完成工作了 (无需查找教程或文档)。\\n\\n5. 寻求与领域专家和实践者的心智模型相匹配的 API。有领域经验但没有 API 经验的人应该能够使用最少的文档直观地理解你的 API\\n\\n6. 一个参数的含义应该是容易理解的，而不需要任何关于底层实现的上下文。\\n\\n7. 在高层次上很简单，但在细节上很精确。\\n\\n10. 错误消息，以及在与 API 交互过程中向用户提供的任何反馈，都是 API 的一部分。交互性和反馈是用户体验的一部分。需要谨慎的设计 API 的错误消息。\\n\\n11. 因为代码是一种交流方式，所以命名很重要——无论是命名项目还是变量。名字反映了你对问题的看法。避免使用过于通用的名称（ x, variable, parameter），避免使用过于冗长和特定的命名模式，避免使用可能造成不必要误解的术语 (主、从)，并确保你的命名选择方式是一致的。\\n\\n12. 文档是影响 API 用户体验的关键。它不是一个附加产品。着力产出高质量的文档，你将看到比开发更多功能带来的更高回报。\\n\\n13. 你的文档不应该讨论软件是如何工作的，它应该展示如何使用这个软件。\\n\\n# 软件职业生涯\\n1. 事业的进步不在于你管理了多少人，而在于你产生了多大的影响：一个有你的工作的世界和一个没有你的工作的世界之间的差别。\\n\\n2. 软件开发是团队合作 ; 它不仅关乎技术能力，也关乎人际关系。做一个好队友。当你开始做事情的时候，要和别人保持沟通。\\n\\n3. 技术从来都不是中立的。如果你的工作可能对世界产生任何影响，那么这种影响是有道德导向的。\\n\\n4. 自我指导——掌控你的工作和环境——是获得生活满足感的关键。\\n\\n5. 创造世界所需要的，而不仅仅是你希望拥有的。技术人员往往过着精细化的生活，专注于满足自己特定需求的产品。寻找机会拓宽你的生活经验，这将使你更好地看到世界需要什么。\\n\\n6. 当做出任何具有长期影响的选择时，将你的价值观置于短期的自我利益和短暂的情绪之上——比如贪婪或恐惧。知道你的价值观是什么，让它们来引导你。\\n\\n7. 当我们发现自己陷入矛盾中时，应该停下来寻找我们共同的价值观和共同的目标，并提醒自己，我们几乎肯定站在同一条战线上。\\n\\n8. 生产力可以归结为快速决策和偏好行动。\\n\\n9. 快速做决定意味着在你的职业生涯中你能做出更多的决定，这会让你对哪一个备选项才是正确的选择产生更强的直觉。经验是生产力的关键，更高的生产力将为你提供更多的经验：这是一个良性循环。\\n\\n10. 在你意识到自己缺乏直觉的情况下，坚持抽象原则。在你的职业生涯中建立一个可靠的原则清单。\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1NDA4NjU2MA==&amp;mid=2247493601&amp;idx=1&amp;sn=3ed76b66c7568bef90251a247addcc43&amp;chksm=fbea5e2ecc9dd73853cbd6a86cab04c04ecd569edb8899a28dee75c0e3c6c7b0879784ecd076&amp;scene=27#wechat_redirect\">from url</a></p>\n<p><a href=\"https://medium.com/s/story/notes-to-myself-on-software-engineering-c890f16f4e4d\">original url</a></p>\n<h1 id=\"\">关于开发过程</h1>\n<ol>\n<li>\n<p>代码不仅仅是用来运行的。代码也是跨团队交流的一种方式，是向他人描述问题解决方案的一种方式。选择恰当的自解释变量名，添加注释来描述所有隐含的内容。</p>\n</li>\n<li>\n<p>不要渴望你的 pull request 能为你赢得多少名声，而要多关注你的 pull request 能为你的用户和社区做些什么。要不惜一切代价避免“功利性的贡献”。如果你提交的功能对于这个产品想要达到的目的没有明显的帮助，就不要添加任何功能。</p>\n</li>\n<li>\n<p>品味也适用于代码。保持对简单性的偏爱。</p>\n</li>\n<li>\n<p>要学会说“不”——仅仅因为有人要求做某个特性，并不意味着你就应该这么做。每个特性都有一个超出初始实现的成本：维护成本、文档成本和用户的认知成本。我们要时刻提醒自己：我们真的应该这样做吗? 通常，答案是否定的。</p>\n</li>\n<li>\n<p>当你准备答应实现一个新的使用场景时，请记住，仅从字面意思理解实现用户的需求通常不是最佳选择。用户关注的仅仅是他们自己的特定使用场景，你必须从整个项目的角度出发，兼顾整体性和原则性。通常，正确的做法是在现有特性的基础上做扩展。</p>\n</li>\n<li>\n<p>不断进行持续集成，并以完整的单元测试覆盖为目标。确保你处在一个可以自信地编写代码的环境中；如果不是这样，那么你需要从构建正确的基础设施开始。</p>\n</li>\n<li>\n<p>可以不事先计划好一切。先试一下，看看结果如何。尽早对错误的选择进行回退。当然，前提是确保你的开发环境可以做到这一点。</p>\n</li>\n</ol>\n<p>8.好的软件使困难的事情变得简单。问题一开始看起来很困难，并不意味着解决方案必须很复杂或者很难操作。在编写任何代码之前，请确保你所选择的解决方案已经简单到不能再简单。</p>\n<ol start=\"9\">\n<li>\n<p>避免隐式规则。应该明确说明你自己开发的隐式规则，并与他人共享。你应该在软件中尝试自动化任何可以自动化的工作流.</p>\n</li>\n<li>\n<p>在设计过程中应该考虑你选择方案的总体影响</p>\n</li>\n</ol>\n<h1 id=\"api\">API 的设计</h1>\n<ol>\n<li>\n<p>你的 API 是有用户的，因此它事关用户体验。在你做的每一个决定中，都要考虑到用户。要站在用户的角度思考问题，无论他们是初学者还是有经验的开发人员。</p>\n</li>\n<li>\n<p>总是想着让你的用户在使用 API 的过程中尽量减少认知负荷。自动化可以自动化的东西，最小化用户需要做的操作和选择，不显示不重要的选项，设计简单一致的工作流，反映简单一致的思维模型。</p>\n</li>\n<li>\n<p>简单的事情要简单处理，复杂的事情应该尽量简单化。不要为了少量特殊的使用场景而增加普通使用场景的认知负荷，即使是最低限度的。</p>\n</li>\n<li>\n<p>如果工作流的认知负荷足够低，那么用户在使用一到两次之后，应该可以凭记忆完成工作了 (无需查找教程或文档)。</p>\n</li>\n<li>\n<p>寻求与领域专家和实践者的心智模型相匹配的 API。有领域经验但没有 API 经验的人应该能够使用最少的文档直观地理解你的 API</p>\n</li>\n<li>\n<p>一个参数的含义应该是容易理解的，而不需要任何关于底层实现的上下文。</p>\n</li>\n<li>\n<p>在高层次上很简单，但在细节上很精确。</p>\n</li>\n<li>\n<p>错误消息，以及在与 API 交互过程中向用户提供的任何反馈，都是 API 的一部分。交互性和反馈是用户体验的一部分。需要谨慎的设计 API 的错误消息。</p>\n</li>\n<li>\n<p>因为代码是一种交流方式，所以命名很重要——无论是命名项目还是变量。名字反映了你对问题的看法。避免使用过于通用的名称（ x, variable, parameter），避免使用过于冗长和特定的命名模式，避免使用可能造成不必要误解的术语 (主、从)，并确保你的命名选择方式是一致的。</p>\n</li>\n<li>\n<p>文档是影响 API 用户体验的关键。它不是一个附加产品。着力产出高质量的文档，你将看到比开发更多功能带来的更高回报。</p>\n</li>\n<li>\n<p>你的文档不应该讨论软件是如何工作的，它应该展示如何使用这个软件。</p>\n</li>\n</ol>\n<h1 id=\"\">软件职业生涯</h1>\n<ol>\n<li>\n<p>事业的进步不在于你管理了多少人，而在于你产生了多大的影响：一个有你的工作的世界和一个没有你的工作的世界之间的差别。</p>\n</li>\n<li>\n<p>软件开发是团队合作 ; 它不仅关乎技术能力，也关乎人际关系。做一个好队友。当你开始做事情的时候，要和别人保持沟通。</p>\n</li>\n<li>\n<p>技术从来都不是中立的。如果你的工作可能对世界产生任何影响，那么这种影响是有道德导向的。</p>\n</li>\n<li>\n<p>自我指导——掌控你的工作和环境——是获得生活满足感的关键。</p>\n</li>\n<li>\n<p>创造世界所需要的，而不仅仅是你希望拥有的。技术人员往往过着精细化的生活，专注于满足自己特定需求的产品。寻找机会拓宽你的生活经验，这将使你更好地看到世界需要什么。</p>\n</li>\n<li>\n<p>当做出任何具有长期影响的选择时，将你的价值观置于短期的自我利益和短暂的情绪之上——比如贪婪或恐惧。知道你的价值观是什么，让它们来引导你。</p>\n</li>\n<li>\n<p>当我们发现自己陷入矛盾中时，应该停下来寻找我们共同的价值观和共同的目标，并提醒自己，我们几乎肯定站在同一条战线上。</p>\n</li>\n<li>\n<p>生产力可以归结为快速决策和偏好行动。</p>\n</li>\n<li>\n<p>快速做决定意味着在你的职业生涯中你能做出更多的决定，这会让你对哪一个备选项才是正确的选择产生更强的直觉。经验是生产力的关键，更高的生产力将为你提供更多的经验：这是一个良性循环。</p>\n</li>\n<li>\n<p>在你意识到自己缺乏直觉的情况下，坚持抽象原则。在你的职业生涯中建立一个可靠的原则清单。</p>\n</li>\n</ol>\n</div>","amp":null,"plaintext":"from url\n\noriginal url\n[https://medium.com/s/story/notes-to-myself-on-software-engineering-c890f16f4e4d]\n\n关于开发过程\n 1. 代码不仅仅是用来运行的。代码也是跨团队交流的一种方式，是向他人描述问题解决方案的一种方式。选择恰当的自解释变量名，添加注释来描述所有隐含的内容。\n    \n    \n 2. 不要渴望你的 pull request 能为你赢得多少名声，而要多关注你的 pull request\n    能为你的用户和社区做些什么。要不惜一切代价避免“功利性的贡献”。如果你提交的功能对于这个产品想要达到的目的没有明显的帮助，就不要添加任何功能。\n    \n    \n 3. 品味也适用于代码。保持对简单性的偏爱。\n    \n    \n 4. 要学会说“不”——仅仅因为有人要求做某个特性，并不意味着你就应该这么做。每个特性都有一个超出初始实现的成本：维护成本、文档成本和用户的认知成本。我们要时刻提醒自己：我们真的应该这样做吗?\n    通常，答案是否定的。\n    \n    \n 5. 当你准备答应实现一个新的使用场景时，请记住，仅从字面意思理解实现用户的需求通常不是最佳选择。用户关注的仅仅是他们自己的特定使用场景，你必须从整个项目的角度出发，兼顾整体性和原则性。通常，正确的做法是在现有特性的基础上做扩展。\n    \n    \n 6. 不断进行持续集成，并以完整的单元测试覆盖为目标。确保你处在一个可以自信地编写代码的环境中；如果不是这样，那么你需要从构建正确的基础设施开始。\n    \n    \n 7. 可以不事先计划好一切。先试一下，看看结果如何。尽早对错误的选择进行回退。当然，前提是确保你的开发环境可以做到这一点。\n    \n    \n\n8.好的软件使困难的事情变得简单。问题一开始看起来很困难，并不意味着解决方案必须很复杂或者很难操作。在编写任何代码之前，请确保你所选择的解决方案已经简单到不能再简单。\n\n 9.  避免隐式规则。应该明确说明你自己开发的隐式规则，并与他人共享。你应该在软件中尝试自动化任何可以自动化的工作流.\n     \n     \n 10. 在设计过程中应该考虑你选择方案的总体影响\n     \n     \n\nAPI 的设计\n 1.  你的 API 是有用户的，因此它事关用户体验。在你做的每一个决定中，都要考虑到用户。要站在用户的角度思考问题，无论他们是初学者还是有经验的开发人员。\n     \n     \n 2.  总是想着让你的用户在使用 API\n     的过程中尽量减少认知负荷。自动化可以自动化的东西，最小化用户需要做的操作和选择，不显示不重要的选项，设计简单一致的工作流，反映简单一致的思维模型。\n     \n     \n 3.  简单的事情要简单处理，复杂的事情应该尽量简单化。不要为了少量特殊的使用场景而增加普通使用场景的认知负荷，即使是最低限度的。\n     \n     \n 4.  如果工作流的认知负荷足够低，那么用户在使用一到两次之后，应该可以凭记忆完成工作了 (无需查找教程或文档)。\n     \n     \n 5.  寻求与领域专家和实践者的心智模型相匹配的 API。有领域经验但没有 API 经验的人应该能够使用最少的文档直观地理解你的 API\n     \n     \n 6.  一个参数的含义应该是容易理解的，而不需要任何关于底层实现的上下文。\n     \n     \n 7.  在高层次上很简单，但在细节上很精确。\n     \n     \n 8.  错误消息，以及在与 API 交互过程中向用户提供的任何反馈，都是 API 的一部分。交互性和反馈是用户体验的一部分。需要谨慎的设计 API\n     的错误消息。\n     \n     \n 9.  因为代码是一种交流方式，所以命名很重要——无论是命名项目还是变量。名字反映了你对问题的看法。避免使用过于通用的名称（ x, variable,\n     parameter），避免使用过于冗长和特定的命名模式，避免使用可能造成不必要误解的术语 (主、从)，并确保你的命名选择方式是一致的。\n     \n     \n 10. 文档是影响 API 用户体验的关键。它不是一个附加产品。着力产出高质量的文档，你将看到比开发更多功能带来的更高回报。\n     \n     \n 11. 你的文档不应该讨论软件是如何工作的，它应该展示如何使用这个软件。\n     \n     \n\n软件职业生涯\n 1.  事业的进步不在于你管理了多少人，而在于你产生了多大的影响：一个有你的工作的世界和一个没有你的工作的世界之间的差别。\n     \n     \n 2.  软件开发是团队合作 ; 它不仅关乎技术能力，也关乎人际关系。做一个好队友。当你开始做事情的时候，要和别人保持沟通。\n     \n     \n 3.  技术从来都不是中立的。如果你的工作可能对世界产生任何影响，那么这种影响是有道德导向的。\n     \n     \n 4.  自我指导——掌控你的工作和环境——是获得生活满足感的关键。\n     \n     \n 5.  创造世界所需要的，而不仅仅是你希望拥有的。技术人员往往过着精细化的生活，专注于满足自己特定需求的产品。寻找机会拓宽你的生活经验，这将使你更好地看到世界需要什么。\n     \n     \n 6.  当做出任何具有长期影响的选择时，将你的价值观置于短期的自我利益和短暂的情绪之上——比如贪婪或恐惧。知道你的价值观是什么，让它们来引导你。\n     \n     \n 7.  当我们发现自己陷入矛盾中时，应该停下来寻找我们共同的价值观和共同的目标，并提醒自己，我们几乎肯定站在同一条战线上。\n     \n     \n 8.  生产力可以归结为快速决策和偏好行动。\n     \n     \n 9.  快速做决定意味着在你的职业生涯中你能做出更多的决定，这会让你对哪一个备选项才是正确的选择产生更强的直觉。经验是生产力的关键，更高的生产力将为你提供更多的经验：这是一个良性循环。\n     \n     \n 10. 在你意识到自己缺乏直觉的情况下，坚持抽象原则。在你的职业生涯中建立一个可靠的原则清单。","feature_image":"https://images.unsplash.com/photo-1541240290619-3f2fad86473d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ&s=5e3b4fa48bb71c93c3aeaf119987ab29","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-11-05 02:59:15","created_by":"1","updated_at":"2018-11-05 03:22:16","updated_by":"1","published_at":"2018-11-05 03:22:15","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5c53dc6540b67a0001f445cb","uuid":"a8cfb4e0-8c3c-49ab-ab61-6009d403e724","title":"git rebase vs. git merge","slug":"git-rebase-vs-git-merge","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"https://www.atlassian.com/git/tutorials/merging-vs-rebasing\\n\\n之前很少用 git rebase, 看了这篇文章之后清晰了不少。\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><a href=\"https://www.atlassian.com/git/tutorials/merging-vs-rebasing\">https://www.atlassian.com/git/tutorials/merging-vs-rebasing</a></p>\n<p>之前很少用 git rebase, 看了这篇文章之后清晰了不少。</p>\n</div>","amp":null,"plaintext":"https://www.atlassian.com/git/tutorials/merging-vs-rebasing\n\n之前很少用 git rebase, 看了这篇文章之后清晰了不少。","feature_image":"https://images.unsplash.com/photo-1548773589-086668d6b9c3?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2019-02-01 05:43:01","created_by":"1","updated_at":"2019-02-01 05:46:02","updated_by":"1","published_at":"2019-02-01 05:43:48","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null}],"users":[{"id":"1","name":"Yufei Ren","slug":"yufei","ghost_auth_access_token":null,"ghost_auth_id":null,"password":"$2a$10$JWdmdeIMS/8yJCwQr46dx.aB9qz39J0TqgSHLzbMQR3N3.cx67CY.","email":"renyufei@gmail.com","profile_image":"//www.gravatar.com/avatar/15d1d25412c2fdc9739d2aac42564c60?s=250&d=mm&r=x","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":"[\"getting-started\",\"using-the-editor\",\"upload-a-theme\",\"static-post\",\"featured-post\"]","last_seen":"2019-02-10 08:38:54","created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2019-02-10 08:38:54","updated_by":"1"},{"id":"5951f5fca366002ebd5dbef7","name":"Ghost","slug":"ghost","ghost_auth_access_token":null,"ghost_auth_id":null,"password":"$2a$10$8KaiSOVzTzh7IjQREz0Yd.PP0VOOmdTjkHU.Syu0Lmkyg7cvQov3.","email":"ghost-author@example.com","profile_image":null,"cover_image":null,"bio":"You can delete this user to remove all the welcome posts","website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"}],"roles":[{"id":"5a4a6ddc42dfe900311f3503","name":"Administrator","description":"Administrators","created_at":"2018-01-01 17:20:28","created_by":"1","updated_at":"2018-01-01 17:20:28","updated_by":"1"},{"id":"5a4a6ddc42dfe900311f3504","name":"Editor","description":"Editors","created_at":"2018-01-01 17:20:28","created_by":"1","updated_at":"2018-01-01 17:20:28","updated_by":"1"},{"id":"5a4a6ddc42dfe900311f3505","name":"Author","description":"Authors","created_at":"2018-01-01 17:20:28","created_by":"1","updated_at":"2018-01-01 17:20:28","updated_by":"1"},{"id":"5a4a6ddc42dfe900311f3506","name":"Owner","description":"Blog Owner","created_at":"2018-01-01 17:20:28","created_by":"1","updated_at":"2018-01-01 17:20:28","updated_by":"1"}],"roles_users":[{"id":"5a4a6ddd42dfe900311f353c","role_id":"5a4a6ddc42dfe900311f3505","user_id":"5951f5fca366002ebd5dbef7"},{"id":"5a4a6ddd42dfe900311f35ac","role_id":"5a4a6ddc42dfe900311f3506","user_id":"1"}],"permissions":[{"id":"5a4a6ddc42dfe900311f3507","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2018-01-01 17:20:28","created_by":"1","updated_at":"2018-01-01 17:20:28","updated_by":"1"},{"id":"5a4a6ddc42dfe900311f3508","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2018-01-01 17:20:28","created_by":"1","updated_at":"2018-01-01 17:20:28","updated_by":"1"},{"id":"5a4a6ddc42dfe900311f3509","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2018-01-01 17:20:28","created_by":"1","updated_at":"2018-01-01 17:20:28","updated_by":"1"},{"id":"5a4a6ddc42dfe900311f350a","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2018-01-01 17:20:28","created_by":"1","updated_at":"2018-01-01 17:20:28","updated_by":"1"},{"id":"5a4a6ddc42dfe900311f350b","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2018-01-01 17:20:28","created_by":"1","updated_at":"2018-01-01 17:20:28","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f350c","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f350d","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f350e","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f350f","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3510","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3511","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3512","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3513","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3514","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3515","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3516","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3517","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3518","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3519","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f351a","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f351b","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f351c","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f351d","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f351e","name":"Activate themes","object_type":"theme","action_type":"activate","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f351f","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3520","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3521","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3522","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3523","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3524","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3525","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3526","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3527","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3528","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3529","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f352a","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f352b","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f352c","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f352d","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f352e","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f352f","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3530","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3531","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3532","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3533","name":"Browse invites","object_type":"invite","action_type":"browse","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3534","name":"Read invites","object_type":"invite","action_type":"read","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3535","name":"Edit invites","object_type":"invite","action_type":"edit","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3536","name":"Add invites","object_type":"invite","action_type":"add","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3537","name":"Delete invites","object_type":"invite","action_type":"destroy","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3538","name":"Download redirects","object_type":"redirect","action_type":"download","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f3539","name":"Upload redirects","object_type":"redirect","action_type":"upload","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f353a","name":"Add webhooks","object_type":"webhook","action_type":"add","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"},{"id":"5a4a6ddd42dfe900311f353b","name":"Delete webhooks","object_type":"webhook","action_type":"destroy","object_id":null,"created_at":"2018-01-01 17:20:29","created_by":"1","updated_at":"2018-01-01 17:20:29","updated_by":"1"}],"permissions_users":[],"permissions_roles":[{"id":"5a4a6ddd42dfe900311f353d","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddc42dfe900311f3507"},{"id":"5a4a6ddd42dfe900311f353e","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddc42dfe900311f3508"},{"id":"5a4a6ddd42dfe900311f353f","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddc42dfe900311f3509"},{"id":"5a4a6ddd42dfe900311f3540","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddc42dfe900311f350a"},{"id":"5a4a6ddd42dfe900311f3541","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddc42dfe900311f350b"},{"id":"5a4a6ddd42dfe900311f3542","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f350c"},{"id":"5a4a6ddd42dfe900311f3543","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f350d"},{"id":"5a4a6ddd42dfe900311f3544","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f350e"},{"id":"5a4a6ddd42dfe900311f3545","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f350f"},{"id":"5a4a6ddd42dfe900311f3546","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3510"},{"id":"5a4a6ddd42dfe900311f3547","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3511"},{"id":"5a4a6ddd42dfe900311f3548","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3512"},{"id":"5a4a6ddd42dfe900311f3549","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3513"},{"id":"5a4a6ddd42dfe900311f354a","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3514"},{"id":"5a4a6ddd42dfe900311f354b","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3515"},{"id":"5a4a6ddd42dfe900311f354c","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3516"},{"id":"5a4a6ddd42dfe900311f354d","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3517"},{"id":"5a4a6ddd42dfe900311f354e","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3518"},{"id":"5a4a6ddd42dfe900311f354f","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3519"},{"id":"5a4a6ddd42dfe900311f3550","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f351a"},{"id":"5a4a6ddd42dfe900311f3551","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f351b"},{"id":"5a4a6ddd42dfe900311f3552","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f351c"},{"id":"5a4a6ddd42dfe900311f3553","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f351d"},{"id":"5a4a6ddd42dfe900311f3554","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f351e"},{"id":"5a4a6ddd42dfe900311f3555","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f351f"},{"id":"5a4a6ddd42dfe900311f3556","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3520"},{"id":"5a4a6ddd42dfe900311f3557","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3521"},{"id":"5a4a6ddd42dfe900311f3558","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3522"},{"id":"5a4a6ddd42dfe900311f3559","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3523"},{"id":"5a4a6ddd42dfe900311f355a","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3524"},{"id":"5a4a6ddd42dfe900311f355b","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3525"},{"id":"5a4a6ddd42dfe900311f355c","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3526"},{"id":"5a4a6ddd42dfe900311f355d","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3527"},{"id":"5a4a6ddd42dfe900311f355e","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3528"},{"id":"5a4a6ddd42dfe900311f355f","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3529"},{"id":"5a4a6ddd42dfe900311f3560","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f352a"},{"id":"5a4a6ddd42dfe900311f3561","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f352b"},{"id":"5a4a6ddd42dfe900311f3562","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f352c"},{"id":"5a4a6ddd42dfe900311f3563","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f352d"},{"id":"5a4a6ddd42dfe900311f3564","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f352e"},{"id":"5a4a6ddd42dfe900311f3565","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f352f"},{"id":"5a4a6ddd42dfe900311f3566","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3530"},{"id":"5a4a6ddd42dfe900311f3567","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3531"},{"id":"5a4a6ddd42dfe900311f3568","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3532"},{"id":"5a4a6ddd42dfe900311f3569","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3533"},{"id":"5a4a6ddd42dfe900311f356a","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3534"},{"id":"5a4a6ddd42dfe900311f356b","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3535"},{"id":"5a4a6ddd42dfe900311f356c","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3536"},{"id":"5a4a6ddd42dfe900311f356d","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3537"},{"id":"5a4a6ddd42dfe900311f356e","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3538"},{"id":"5a4a6ddd42dfe900311f356f","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f3539"},{"id":"5a4a6ddd42dfe900311f3570","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f353a"},{"id":"5a4a6ddd42dfe900311f3571","role_id":"5a4a6ddc42dfe900311f3503","permission_id":"5a4a6ddd42dfe900311f353b"},{"id":"5a4a6ddd42dfe900311f3572","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f350e"},{"id":"5a4a6ddd42dfe900311f3573","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f350f"},{"id":"5a4a6ddd42dfe900311f3574","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3510"},{"id":"5a4a6ddd42dfe900311f3575","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3511"},{"id":"5a4a6ddd42dfe900311f3576","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3512"},{"id":"5a4a6ddd42dfe900311f3577","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3513"},{"id":"5a4a6ddd42dfe900311f3578","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3514"},{"id":"5a4a6ddd42dfe900311f3579","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3516"},{"id":"5a4a6ddd42dfe900311f357a","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3517"},{"id":"5a4a6ddd42dfe900311f357b","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3518"},{"id":"5a4a6ddd42dfe900311f357c","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3519"},{"id":"5a4a6ddd42dfe900311f357d","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f351a"},{"id":"5a4a6ddd42dfe900311f357e","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f351b"},{"id":"5a4a6ddd42dfe900311f357f","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3522"},{"id":"5a4a6ddd42dfe900311f3580","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3523"},{"id":"5a4a6ddd42dfe900311f3581","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3524"},{"id":"5a4a6ddd42dfe900311f3582","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3525"},{"id":"5a4a6ddd42dfe900311f3583","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3526"},{"id":"5a4a6ddd42dfe900311f3584","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3527"},{"id":"5a4a6ddd42dfe900311f3585","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3528"},{"id":"5a4a6ddd42dfe900311f3586","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3529"},{"id":"5a4a6ddd42dfe900311f3587","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f352a"},{"id":"5a4a6ddd42dfe900311f3588","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f352b"},{"id":"5a4a6ddd42dfe900311f3589","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f352c"},{"id":"5a4a6ddd42dfe900311f358a","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f352d"},{"id":"5a4a6ddd42dfe900311f358b","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3531"},{"id":"5a4a6ddd42dfe900311f358c","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3533"},{"id":"5a4a6ddd42dfe900311f358d","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3534"},{"id":"5a4a6ddd42dfe900311f358e","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3535"},{"id":"5a4a6ddd42dfe900311f358f","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3536"},{"id":"5a4a6ddd42dfe900311f3590","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f3537"},{"id":"5a4a6ddd42dfe900311f3591","role_id":"5a4a6ddc42dfe900311f3504","permission_id":"5a4a6ddd42dfe900311f351c"},{"id":"5a4a6ddd42dfe900311f3592","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f350e"},{"id":"5a4a6ddd42dfe900311f3593","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f350f"},{"id":"5a4a6ddd42dfe900311f3594","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f3511"},{"id":"5a4a6ddd42dfe900311f3595","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f3513"},{"id":"5a4a6ddd42dfe900311f3596","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f3514"},{"id":"5a4a6ddd42dfe900311f3597","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f3516"},{"id":"5a4a6ddd42dfe900311f3598","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f3517"},{"id":"5a4a6ddd42dfe900311f3599","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f3518"},{"id":"5a4a6ddd42dfe900311f359a","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f351a"},{"id":"5a4a6ddd42dfe900311f359b","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f3522"},{"id":"5a4a6ddd42dfe900311f359c","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f3523"},{"id":"5a4a6ddd42dfe900311f359d","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f3528"},{"id":"5a4a6ddd42dfe900311f359e","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f3529"},{"id":"5a4a6ddd42dfe900311f359f","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f352a"},{"id":"5a4a6ddd42dfe900311f35a0","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f352b"},{"id":"5a4a6ddd42dfe900311f35a1","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f352c"},{"id":"5a4a6ddd42dfe900311f35a2","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f352d"},{"id":"5a4a6ddd42dfe900311f35a3","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f3531"},{"id":"5a4a6ddd42dfe900311f35a4","role_id":"5a4a6ddc42dfe900311f3505","permission_id":"5a4a6ddd42dfe900311f351c"}],"permissions_apps":[],"settings":[{"id":"5a4a6ddf55630c0001d48993","key":"db_hash","value":"2a9101c7-f1af-4ed2-8ac4-b57f8ddbcdb7","type":"core","created_at":"2018-01-01 17:20:31","created_by":"1","updated_at":"2018-01-01 17:20:31","updated_by":"1"},{"id":"5a4a6ddf55630c0001d48994","key":"next_update_check","value":"1549874333","type":"core","created_at":"2018-01-01 17:20:31","created_by":"1","updated_at":"2019-02-10 08:38:52","updated_by":"1"},{"id":"5a4a6ddf55630c0001d48995","key":"display_update_notification","value":"all-v1","type":"core","created_at":"2018-01-01 17:20:31","created_by":"1","updated_at":"2018-09-07 05:31:23","updated_by":"1"},{"id":"5a4a6ddf55630c0001d48996","key":"seen_notifications","value":"[\"5b920d2b6e01830001a9c2c4\",\"5bdef3f26e01830001a9c2d4\",\"5bfea7b840b67a0001f445be\",\"5c13cf3440b67a0001f445c1\",\"5c53dbad40b67a0001f445c8\"]","type":"core","created_at":"2018-01-01 17:20:31","created_by":"1","updated_at":"2019-02-01 05:45:40","updated_by":"1"},{"id":"5a4a6ddf55630c0001d48997","key":"title","value":"nuts and bolts","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d48998","key":"description","value":"Thoughts, stories and ideas.","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d48999","key":"logo","value":"","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d4899a","key":"cover_image","value":"http://i.imgur.com/yumSnWZ.jpg","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d4899b","key":"icon","value":"","type":"blog","created_at":"2018-01-01 17:20:31","created_by":"1","updated_at":"2018-01-01 17:20:31","updated_by":"1"},{"id":"5a4a6ddf55630c0001d4899c","key":"default_locale","value":"en","type":"blog","created_at":"2018-01-01 17:20:31","created_by":"1","updated_at":"2018-01-01 17:20:31","updated_by":"1"},{"id":"5a4a6ddf55630c0001d4899d","key":"active_timezone","value":"Etc/UTC","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d4899e","key":"force_i18n","value":"true","type":"blog","created_at":"2018-01-01 17:20:31","created_by":"1","updated_at":"2018-01-01 17:20:31","updated_by":"1"},{"id":"5a4a6ddf55630c0001d4899f","key":"permalinks","value":"/:slug/","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489a0","key":"amp","value":"true","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489a1","key":"ghost_head","value":"","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489a2","key":"ghost_foot","value":"","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489a3","key":"facebook","value":"","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489a4","key":"twitter","value":"","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489a5","key":"labs","value":"{\"publicAPI\":true}","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489a6","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"side project\",\"url\":\"https://github.com/yren\"},{\"label\":\"about myself\",\"url\":\"https://cn.linkedin.com/in/yufei-ren-4a74ab32\"},{\"label\":\"contact\",\"url\":\"mailto:renyufei@gmail.com\"}]","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 18:22:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489a7","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489a8","key":"unsplash","value":"{\"isActive\":true}","type":"blog","created_at":"2018-01-01 17:20:31","created_by":"1","updated_at":"2018-01-01 18:22:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489a9","key":"active_theme","value":"casper","type":"theme","created_at":"2018-01-01 17:20:31","created_by":"1","updated_at":"2018-01-01 17:20:31","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489aa","key":"active_apps","value":"[]","type":"app","created_at":"2018-01-01 17:20:31","created_by":"1","updated_at":"2018-01-01 17:20:31","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489ab","key":"installed_apps","value":"[]","type":"app","created_at":"2018-01-01 17:20:31","created_by":"1","updated_at":"2018-01-01 17:20:31","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489ac","key":"is_private","value":"false","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489ad","key":"password","value":"null","type":"blog","created_at":"2017-06-25 15:12:14","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a6ddf55630c0001d489ae","key":"public_hash","value":"b36f28f6376e01811907aab6d6a3e4","type":"private","created_at":"2018-01-01 17:20:31","created_by":"1","updated_at":"2018-01-01 17:20:31","updated_by":"1"}],"tags":[{"id":"5a4a757c55630c0001d489b5","name":"Getting Started","slug":"getting-started","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-25 15:12:13","created_by":"1","updated_at":"2017-06-25 15:12:13","updated_by":"1"},{"id":"5a4a757c55630c0001d489b6","name":"tmp","slug":"tmp","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-25 16:11:28","created_by":"1","updated_at":"2018-01-15 08:25:06","updated_by":"1"},{"id":"5a4a757c55630c0001d489b7","name":"ios","slug":"ios","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-25 16:11:28","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a757c55630c0001d489b8","name":"他山之石","slug":"ta-shan-zhi-shi","description":"best practise from others","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-25 16:11:28","created_by":"1","updated_at":"2018-11-05 03:22:16","updated_by":"1"},{"id":"5a4a757c55630c0001d489b9","name":"apache","slug":"apache","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-25 16:11:28","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a757c55630c0001d489ba","name":"web","slug":"web","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-25 16:11:28","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5a4a757c55630c0001d489bb","name":"javascript","slug":"javascript","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-25 16:11:28","created_by":"1","updated_at":"2018-01-01 17:53:00","updated_by":"1"},{"id":"5b63e4c76e01830001a9c2b9","name":"erlang","slug":"erlang","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-08-03 05:14:47","created_by":"1","updated_at":"2018-08-03 05:14:56","updated_by":"1"},{"id":"5b69b05c6e01830001a9c2c0","name":"aws","slug":"aws","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-08-07 14:44:44","created_by":"1","updated_at":"2018-11-05 07:12:14","updated_by":"1"},{"id":"5bd934df6e01830001a9c2c8","name":"nginx","slug":"nginx","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-10-31 04:51:43","created_by":"1","updated_at":"2018-11-05 07:12:14","updated_by":"1"},{"id":"5bd9e8956e01830001a9c2cf","name":"maven","slug":"maven","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-10-31 17:38:29","created_by":"1","updated_at":"2018-11-28 15:15:11","updated_by":"1"},{"id":"5bd9e8956e01830001a9c2d0","name":"github","slug":"github","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-10-31 17:38:29","created_by":"1","updated_at":"2018-11-28 15:15:11","updated_by":"1"},{"id":"5c53dd0440b67a0001f445cc","name":"git","slug":"git","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-02-01 05:45:40","created_by":"1","updated_at":"2019-02-01 05:46:02","updated_by":"1"}],"posts_tags":[{"id":"5a4a757c55630c0001d489c2","post_id":"5a4a757c55630c0001d489bd","tag_id":"5a4a757c55630c0001d489b7","sort_order":0},{"id":"5a4a757c55630c0001d489c3","post_id":"5a4a757c55630c0001d489be","tag_id":"5a4a757c55630c0001d489b6","sort_order":0},{"id":"5a4a757c55630c0001d489c4","post_id":"5a4a757c55630c0001d489bf","tag_id":"5a4a757c55630c0001d489b8","sort_order":0},{"id":"5a4a757c55630c0001d489c5","post_id":"5a4a757c55630c0001d489c0","tag_id":"5a4a757c55630c0001d489bb","sort_order":0},{"id":"5a4a757c55630c0001d489c6","post_id":"5a4a757c55630c0001d489c1","tag_id":"5a4a757c55630c0001d489b9","sort_order":0},{"id":"5a4a757c55630c0001d489c8","post_id":"5a4a757c55630c0001d489c1","tag_id":"5a4a757c55630c0001d489ba","sort_order":1},{"id":"5a5c58ad6e01830001a9c2b1","post_id":"5a5c58436e01830001a9c2b0","tag_id":"5a4a757c55630c0001d489b6","sort_order":0},{"id":"5a5c58cc6e01830001a9c2b2","post_id":"5a5c422a6e01830001a9c2af","tag_id":"5a4a757c55630c0001d489b6","sort_order":0},{"id":"5a5c59286e01830001a9c2b4","post_id":"5a5c58ea6e01830001a9c2b3","tag_id":"5a4a757c55630c0001d489b6","sort_order":0},{"id":"5b63e4c76e01830001a9c2ba","post_id":"5b63e1986e01830001a9c2b8","tag_id":"5b63e4c76e01830001a9c2b9","sort_order":0},{"id":"5b63e4c76e01830001a9c2bc","post_id":"5b63e1986e01830001a9c2b8","tag_id":"5a4a757c55630c0001d489b8","sort_order":1},{"id":"5b69b05c6e01830001a9c2c1","post_id":"5b69afe26e01830001a9c2bf","tag_id":"5b69b05c6e01830001a9c2c0","sort_order":0},{"id":"5b69b05c6e01830001a9c2c3","post_id":"5b69afe26e01830001a9c2bf","tag_id":"5a4a757c55630c0001d489b8","sort_order":1},{"id":"5bd934df6e01830001a9c2c9","post_id":"5bd9313c6e01830001a9c2c7","tag_id":"5bd934df6e01830001a9c2c8","sort_order":0},{"id":"5bd934df6e01830001a9c2cb","post_id":"5bd9313c6e01830001a9c2c7","tag_id":"5b69b05c6e01830001a9c2c0","sort_order":1},{"id":"5bd9e8956e01830001a9c2d1","post_id":"5bd9e70a6e01830001a9c2ce","tag_id":"5bd9e8956e01830001a9c2cf","sort_order":0},{"id":"5bd9e8956e01830001a9c2d3","post_id":"5bd9e70a6e01830001a9c2ce","tag_id":"5bd9e8956e01830001a9c2d0","sort_order":1},{"id":"5bdfb75b6e01830001a9c2d7","post_id":"5bdfb2036e01830001a9c2d6","tag_id":"5a4a757c55630c0001d489b8","sort_order":0},{"id":"5c53dd1840b67a0001f445cd","post_id":"5c53dc6540b67a0001f445cb","tag_id":"5c53dd0440b67a0001f445cc","sort_order":0}],"apps":[],"app_settings":[],"app_fields":[],"subscribers":[],"invites":[],"brute":[{"key":"FVUvLgduMBjHndDeqmQL3JKNg+KwGr3sg6CMXQYJZ/Q=","firstRequest":1541006939378,"lastRequest":1541006939378,"lifetime":1553707739380,"count":1},{"key":"ZoLBfak7ehtI7Z5pTR/ky2EzYLIFhX0HHxo4LOvKEJ4=","firstRequest":1549787934911,"lastRequest":1549787934911,"lifetime":1549791534918,"count":1}],"webhooks":[]}}]}